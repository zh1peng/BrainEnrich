[{"path":"/articles/brainenrich_demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"tutorial demonstrates perform enrichment analysis derived group-level statistics using BrainEnrich package. use effect size maps Bipolar Disorders (BD) gene expression data identify significant gene sets.","code":""},{"path":"/articles/brainenrich_demo.html","id":"load-the-required-libraries","dir":"Articles","previous_headings":"","what":"0. Load the required libraries:","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"library(BrainEnrich) library(dplyr) library(enrichplot) library(ggplot2) library(ggseg)"},{"path":[]},{"path":"/articles/brainenrich_demo.html","id":"load-brain_data-effect-size-maps-of-bipolar-disorders","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.1. Load brain_data (effect size maps of Bipolar Disorders)","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"load brain data contains effect size maps Bipolar Disorders. data includes case-control comparisons regional cortical thickness.","code":"# Load brain data from the package data(brain_data) # Display the structure of the brain data str(brain_data) #> 'data.frame':    34 obs. of  1 variable: #>  $ BD: num  -0.207 -0.095 -0.266 -0.056 -0.036 -0.288 -0.265 -0.25 -0.132 -0.156 ..."},{"path":"/articles/brainenrich_demo.html","id":"show-effect-size-map-for-bd","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis > 1.1. Load brain_data (effect size maps of Bipolar Disorders)","what":"Show effect size map for BD","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"Visualize effect size map understand regional differences cortical thickness. First, define plot function (included package core function).","code":"#' Plot Brain Data #' #' This function creates a brain plot using the ggplot2 and ggseg packages. #' #' df2plot A data frame containing the data to plot. #' ats A character string indicating the atlas to use ('dx', 'dk', 'aseg'). #' what2plot A character string indicating the variable to plot ('statistic'). #' filterby A character string indicating the filter to apply ('p.value', 'p.adj', 'none'). #' title2show A character string indicating the title of the plot. #' limit2show A numeric vector of length 2 indicating the limits for the color scale. #' legend2show A character string indicating the legend title. #' hide_legend A logical value indicating whether to hide the legend. #' hem A character string indicating which hemisphere to plot ('both', 'left', 'right'). #' low A character string indicating the color for the low end of the scale. #' mid A character string indicating the color for the midpoint of the scale. #' high A character string indicating the color for the high end of the scale. #' sufix2remove A character string indicating the suffix to remove from labels. #' return A ggplot2 object.  plot_brain <- function(df2plot,                        ats = c(\"dx\", \"dk\", \"aseg\"),                        what2plot = \"statistic\",                        filterby = c(\"p.value\", \"p.adj\", \"none\"),                        title2show = \"\",                        limit2show = c(-15, 15),                        legend2show = \"Stat\",                        hide_legend = FALSE,                        hem = \"both\",                        low = \"steelblue1\",                        mid = \"white\",                        high = \"firebrick1\",                        sufix2remove = \"_thickavg\") {   # Match arguments with allowed values   ats <- match.arg(ats)   filterby <- match.arg(filterby)    # Apply filters based on p-values   if (filterby == \"p.value\") {     df2plot <- df2plot %>% filter(.data$p.value < 0.05)   } else if (filterby == \"p.adj\") {     df2plot <- df2plot %>% filter(.data$p.adj < 0.05)   } else if (filterby == \"none\") {     df2plot <- df2plot   }    # Modify labels and join data based on anatomical terms   if (ats == \"dx\" || ats == \"dk\") {     atlas <- ifelse(ats == \"dx\", \"desterieux\", \"dk\")     atlas_data <- getExportedValue(\"ggseg\", atlas)     df2plot <- df2plot %>%       mutate(         label = sub(\".*L_\", \"lh_\", .data$label),         label = sub(\".*R_\", \"rh_\", .data$label),         label = sub(sufix2remove, \"\", .data$label)       ) %>%       brain_join(atlas_data) %>%       reposition_brain(as.formula(\". ~ hemi + side\"))   } else if (ats == \"aseg\") {     atlas_data <- getExportedValue(\"ggseg\", \"aseg\") # ggseg::aseg     df2plot <- df2plot %>%       mutate(         label = sub(\"SV_L_\", \"Left-\", .data$label), # Replace \"SV_L_\" with \"Left-\"         label = sub(\"SV_R_\", \"Right-\", .data$label), # Replace \"SV_R_\" with \"Right-\"         label = sub(\"thal\", \"Thalamus-Proper\", .data$label), # Replace \"thal\" with \"Thalamus-Proper\"         label = sub(\"caud\", \"Caudate\", .data$label), # Replace \"caud\" with \"Caudate\"         label = sub(\"put\", \"Putamen\", .data$label), # Replace \"put\" with \"Putamen\"         label = sub(\"pal\", \"Pallidum\", .data$label), # Replace \"pal\" with \"Pallidum\"         label = sub(\"hippo\", \"Hippocampus\", .data$label), # Replace \"hippo\" with \"Hippocampus\"         label = sub(\"amyg\", \"Amygdala\", .data$label), # Replace \"amyg\" with \"Amygdala\"         label = sub(\"accumb\", \"Accumben-area\", .data$label), # Replace \"accumb\" with \"Accumben-area\"         label = sub(\"LatVent\", \"Lateral-Ventricle\", .data$label) # Replace \"LatVent\" with \"Lateral-Ventricle\"       ) %>%       filter(!grepl(\"Accumben-area\", .data$label)) %>%       brain_join(atlas_data) %>%       filter(.data$side == \"coronal\")   }    # Apply conditional filtering based on hemisphere   if (hem %in% c(\"left\", \"right\")) {     df2plot <- df2plot %>% filter(.data$hemi == hem)   }    # Construct the plot   p <- df2plot %>%     ggplot() +     geom_sf(aes(fill = .data[[what2plot]])) +     scale_fill_gradient2(midpoint = 0, low = low, mid = mid, high = high, space = \"Lab\", limits = limit2show) +     ggtitle(title2show) +     theme_void() +     theme(plot.title = element_text(hjust = 0.5)) +     labs(fill = legend2show) +     {       if (hide_legend) theme(legend.position = \"none\")     }    return(p) } df2plot <- brain_data %>% tibble::rownames_to_column(\"label\") plot_brain(df2plot,   ats = \"dk\", filterby = \"none\", limit2show = c(-0.5, 0.5),   what2plot = \"BD\", hem = \"left\", low = \"#0197b2\", mid = \"white\", high = \"orange\",   legend2show = \"Effect Size\" )"},{"path":"/articles/brainenrich_demo.html","id":"create-perm_id-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.2. Create perm_id for the Analysis","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"perm_id list permutations brain regions spinning approach trying maintain spatial structure brain. used generate null distributions enrichment analysis. use function create perm_ids, consider citing original source https://github.com/frantisekvasa/rotate_parcellation relevant papers.","code":"# read the centroid coordinates of the brain regions data(coord_dk_lh) perm_id_dk_lh_5000 <- rotate_parcellation(coord.l = coord_dk_lh, nrot = 5000, seed = 2024)"},{"path":"/articles/brainenrich_demo.html","id":"here-we-load-the-precomputed-perm_id-directly-from-the-package-","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis > 1.2. Create perm_id for the Analysis","what":"Here, we load the precomputed perm_id directly from the package.","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"data(perm_id_dk_lh_5000) str(perm_id_dk_lh_5000) #>  num [1:34, 1:5000] 5 29 19 10 16 24 15 9 7 20 ..."},{"path":"/articles/brainenrich_demo.html","id":"load-gene-expression-data-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.3. Load gene expression data for the Analysis","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"gene_data <- get_geneExp(atlas = \"desikan\", rdonor = \"r0.4\", hem = \"L\") str(gene_data) #>  num [1:34, 1:6513] 0.469 0.607 0.512 0.341 0.664 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:34] \"L_bankssts\" \"L_caudalanteriorcingulate\" \"L_caudalmiddlefrontal\" \"L_cuneus\" ... #>   ..$ : chr [1:6513] \"A1BG\" \"A1BG-AS1\" \"AACS\" \"AADAT\" ..."},{"path":"/articles/brainenrich_demo.html","id":"load-go-mf-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.4. Load GO MF for the Analysis","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"annoData <- get_annoData(type = \"GO_MF\") geneSetList <- get_geneSetList(annoData) length(geneSetList) #> [1] 5060 print(sprintf(\"Number of MF terms: %d\", length(geneSetList))) #> [1] \"Number of MF terms: 5060\""},{"path":[]},{"path":"/articles/brainenrich_demo.html","id":"this-step-is-embedded-in-the-brainenrich-function--here-is-just-to-show-how-it-is-filtered-","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis > 1.4. Load GO MF for the Analysis","what":"This step is embedded in the brainenrich function. Here is just to show how it is filtered.","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"selected.gs <- filter_geneSetList(bg_genes = colnames(gene_data), geneSetList = geneSetList, minGSSize = 20, maxGSSize = 200) print(sprintf(\"%d MF terms have gene size ranging between 20 and 200\", length(selected.gs)))"},{"path":"/articles/brainenrich_demo.html","id":"run-the-analysis","dir":"Articles","previous_headings":"","what":"2. Run the Analysis","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"res <- brainenrich(   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   perm_id = perm_id_dk_lh_5000,   cor_method = \"pearson\",   aggre_method = \"mean\",   null_model = \"spin_brain\",   n_perm = 5000,   n_cores = 0,   minGSSize = 20,   maxGSSize = 200,   pvalueCutoff = 1,   threshold_type = \"sd\",   threshold = 1 )"},{"path":"/articles/brainenrich_demo.html","id":"visualize-the-results","dir":"Articles","previous_headings":"","what":"3. Visualize the Results","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"res gseaResult object commonly used clusterProfiler DOSE packages. means can use existing functions (e.g., enrichplot package) visualize results.","code":""},{"path":"/articles/brainenrich_demo.html","id":"upset-plot","dir":"Articles","previous_headings":"3. Visualize the Results","what":"3.1. Upset Plot","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"upsetplot(res, top = 15)"},{"path":"/articles/brainenrich_demo.html","id":"gene-concept-network","dir":"Articles","previous_headings":"3. Visualize the Results","what":"3.2. Gene-Concept Network","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"geneList <- res@geneList cnetplot(res,   layout = \"kk\", color_category = \"#a6a6a6\", foldChange = geneList,   # color.params = list(foldChange = geneList),   showCategory = 10, cex.params = list(     category_node = 1, gene_node = 0.75,     category_label = 1.2, gene_label = 0.6   ), ) + scale_color_gradient2(   midpoint = 0, low = \"#0197b2\", mid = \"white\", high = \"orange\",   space = \"Lab\", limits = c(-1, 1), name = \"Association\" )"},{"path":"/articles/brainenrich_demo.html","id":"dot-plot","dir":"Articles","previous_headings":"3. Visualize the Results","what":"3.3. Dot Plot","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"dotplot(res, x = \"gsScore\", label_format = 50, showCategory = 30) +   xlab(\"GS score\") + scale_fill_gradient(     high = \"#0197b2\", low = \"orange\",     space = \"Lab\", name = \"p.adjusted\"   )"},{"path":"/articles/brainenrich_demo.html","id":"heatplot","dir":"Articles","previous_headings":"3. Visualize the Results","what":"3.4. Heatplot","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"","code":"heatplot(res, foldChange = geneList, label_format = 50, showCategory = 10) +   scale_fill_gradient2(     midpoint = 0, low = \"#0197b2\", mid = \"white\", high = \"orange\",     space = \"Lab\", limits = c(-1, 1), name = \"Association\"   )"},{"path":"/articles/brainenrich_demo.html","id":"tree-plot-based-on-term-similarity","dir":"Articles","previous_headings":"3. Visualize the Results","what":"3.5. Tree plot based on term similarity","title":"brainenrich (demo):Enrichment analysis of group-level IDPs","text":"Note: requires GOSemSim org.Hs.eg.db packages.","code":"d <- GOSemSim::godata(annoDb = \"org.Hs.eg.db\", ont = \"MF\", keytype = \"SYMBOL\", computeIC = FALSE) # computeIC=FALSE when use Wang method res <- pairwise_termsim(res, method = \"Wang\", semData = d) treeplot(res,   showCategory = 30,   cex_category = 0.9,   nCluster = 5,   nWords = 2,   color = \"p.adjust\",   offset = rel(2) ) + theme(legend.position = c(0.95, 0.46))"},{"path":"/articles/brainscore.simulate_demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulation analysis of brainscore","text":"tutorial demonstrates perform simulation assess false positive rate analysis brainscore. brainscore function calculates gene set scores correlates predictor variable. simulation analysis performed * (1) permuting predictor variable (sim_type ='randomize_pred'); * (2) simulating brain data spinning (sim_type ='spin_brain'); * (3) resampling genes (sim_type ='resampling_gene'). simulation analysis performed assess false positive rate analysis, elements permuted, expect correlation gene set scores predictor variable. demonstration purposes, used small number iterations (sim_n = 5) one subsample size (subsample_size = 100). practice, recommend using larger number iterations (.e. 1000), various subsample sizes (e.g., 50, 100, 150, 200) larger size null models robust analysis.","code":"library(BrainEnrich) library(dplyr) library(enrichplot) library(ggplot2)"},{"path":"/articles/brainscore.simulate_demo.html","id":"prepare-data-for-the-analysis","dir":"Articles","previous_headings":"","what":"1. Prepare Data for the Analysis","title":"Simulation analysis of brainscore","text":"First, prepare data needed enrichment analysis. data simulated (real data) HCP dataset, ’ll using various pre-defined gene sets SynGO brain data analysis.","code":""},{"path":"/articles/brainscore.simulate_demo.html","id":"load-sample-data-simulated-from-hcp-data-","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.1. Load sample data simulated from HCP data.","title":"Simulation analysis of brainscore","text":"data simulated HCP data. Let’s load inspect .","code":"data(sample_df) str(sample_df) #> 'data.frame':    100 obs. of  37 variables: #>  $ L_bankssts                : num  2.44 2.46 2.36 2.59 2.35 ... #>  $ L_caudalanteriorcingulate : num  2.57 2.29 2.67 2.84 2.14 ... #>  $ L_caudalmiddlefrontal     : num  2.58 2.53 2.85 2.85 2.32 ... #>  $ L_cuneus                  : num  2.01 1.98 1.85 1.89 1.93 ... #>  $ L_entorhinal              : num  3.37 3.47 2.77 3.19 2.73 ... #>  $ L_fusiform                : num  2.73 2.67 2.5 2.67 2.44 ... #>  $ L_inferiorparietal        : num  2.45 2.43 2.53 2.62 2.39 ... #>  $ L_inferiortemporal        : num  2.68 2.98 2.69 2.92 2.6 ... #>  $ L_isthmuscingulate        : num  2.46 2.18 2.82 2.24 2.66 ... #>  $ L_lateraloccipital        : num  2.23 2.26 2.33 2.17 2.05 ... #>  $ L_lateralorbitofrontal    : num  2.67 2.67 2.9 2.68 2.54 ... #>  $ L_lingual                 : num  2.01 2.16 1.99 2.09 2.05 ... #>  $ L_medialorbitofrontal     : num  2.18 2.54 2.46 2.33 2.16 ... #>  $ L_middletemporal          : num  2.86 2.91 2.77 3.05 2.82 ... #>  $ L_parahippocampal         : num  2.65 3.02 2.39 2.66 3.1 ... #>  $ L_paracentral             : num  2.47 2.37 2.46 2.65 2.35 ... #>  $ L_parsopercularis         : num  2.48 2.7 2.89 2.73 2.46 ... #>  $ L_parsorbitalis           : num  2.81 2.75 2.99 2.99 2.47 ... #>  $ L_parstriangularis        : num  2.43 2.61 2.75 2.46 2.32 ... #>  $ L_pericalcarine           : num  1.67 1.91 1.8 1.73 1.79 ... #>  $ L_postcentral             : num  2.16 2.1 2.17 2.22 2.14 ... #>  $ L_posteriorcingulate      : num  2.37 2.32 2.76 2.64 2.29 ... #>  $ L_precentral              : num  2.61 2.65 2.79 2.67 2.47 ... #>  $ L_precuneus               : num  2.37 2.3 2.39 2.5 2.24 ... #>  $ L_rostralanteriorcingulate: num  2.25 3 3.01 2.63 2.42 ... #>  $ L_rostralmiddlefrontal    : num  2.44 2.42 2.63 2.58 2.23 ... #>  $ L_superiorfrontal         : num  2.81 2.76 2.91 2.97 2.57 ... #>  $ L_superiorparietal        : num  2.22 2.18 2.29 2.36 2.11 ... #>  $ L_superiortemporal        : num  2.75 3.1 2.63 2.81 2.86 ... #>  $ L_supramarginal           : num  2.65 2.55 2.56 2.63 2.51 ... #>  $ L_frontalpole             : num  2.92 2.8 2.93 3.26 2.7 ... #>  $ L_temporalpole            : num  4.05 3.5 3.92 3.11 3.2 ... #>  $ L_transversetemporal      : num  2.59 2.8 2.26 2.61 2.61 ... #>  $ L_insula                  : num  2.94 2.94 3 3.18 2.74 ... #>  $ Age                       : int  36 36 29 24 31 28 29 29 26 25 ... #>  $ Sex                       : Factor w/ 2 levels \"0\",\"1\": 1 1 1 2 2 2 1 1 1 2 ... #>  $ BMI                       : num  25.2 24.9 23 26 25.4 ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"prepare-brain_data-for-scoring","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.2. prepare brain_data for scoring","title":"Simulation analysis of brainscore","text":"Next, ’ll prepare brain data selecting relevant columns transforming data scoring.","code":"brain_data <- dplyr::select(sample_df, starts_with(\"L_\")) %>% t() colnames(brain_data) <- paste0(\"sub-\", 1:ncol(brain_data)) str(brain_data) #>  num [1:34, 1:100] 2.44 2.57 2.58 2.01 3.37 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:34] \"L_bankssts\" \"L_caudalanteriorcingulate\" \"L_caudalmiddlefrontal\" \"L_cuneus\" ... #>   ..$ : chr [1:100] \"sub-1\" \"sub-2\" \"sub-3\" \"sub-4\" ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"load-gene-expression-data-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.3. Load gene expression data for the Analysis","title":"Simulation analysis of brainscore","text":"now load gene expression data analysis. data based specific brain atlas (Desikan) includes gene expression levels (correlation across donnors > 0.4) left hemisphere.","code":"gene_data <- get_geneExp(atlas = \"desikan\", rdonor = \"r0.4\", hem = \"L\") str(gene_data) #>  num [1:34, 1:6513] 0.469 0.607 0.512 0.341 0.664 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:34] \"L_bankssts\" \"L_caudalanteriorcingulate\" \"L_caudalmiddlefrontal\" \"L_cuneus\" ... #>   ..$ : chr [1:6513] \"A1BG\" \"A1BG-AS1\" \"AACS\" \"AADAT\" ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"load-syngo-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.4. Load SynGO for the Analysis","title":"Simulation analysis of brainscore","text":"load SynGO terms used enrichment analysis. data represents gene sets associated various molecular functions.","code":"annoData <- get_annoData(type = \"SynGO\") geneSetList <- get_geneSetList(annoData) length(geneSetList) #> [1] 302 print(sprintf(\"Number of SynGO terms: %d\", length(geneSetList))) #> [1] \"Number of SynGO terms: 302\""},{"path":"/articles/brainscore.simulate_demo.html","id":"filter-the-genesetlist-optional","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis > 1.4. Load SynGO for the Analysis","what":"Filter the geneSetList (Optional)","title":"Simulation analysis of brainscore","text":"Filtering gene sets size optional shown demonstration purposes. step embedded brainenrich/brainscore function.","code":"selected.gs <- filter_geneSetList(bg_genes = colnames(gene_data), geneSetList = geneSetList, minGSSize = 20, maxGSSize = 200) print(sprintf(\"%d MF terms have gene size ranging between 20 and 200\", length(selected.gs)))"},{"path":"/articles/brainscore.simulate_demo.html","id":"run-the-simulation-analysis","dir":"Articles","previous_headings":"","what":"2. Run the Simulation Analysis","title":"Simulation analysis of brainscore","text":"section, run enrichment analysis using prepared data. permute data different ways subsample examine false positive rate.","code":""},{"path":"/articles/brainscore.simulate_demo.html","id":"simulation-analysis-with-randomized-pred-variable-i-e--bmi-sim_type-randomize_pred","dir":"Articles","previous_headings":"2. Run the Simulation Analysis","what":"2.1. Simulation analysis with randomized pred variable i.e., BMI (sim_type ='randomize_pred')","title":"Simulation analysis of brainscore","text":"Note: Since gene set scores already calculated, randomizing predictor variable (BMI) offers limited information regarding false positive rate individual scoring. Basically, testing false discovery rate correlation (.e., lm model). result list lists, sublist contains significance testing results term, separately without FDR correction. 1 denotes significant (p fdr-p < 0.05), 0 denotes non-significant. results fdr corrected p-values across gene sets (Dependent_vars) also available result list. However, expecting significant resutls gene set (.e., Dependent_var), FDR correction across gene sets inappropriate.","code":"cov_df <- sample_df %>% dplyr::select(Age, Sex) pred_df <- sample_df %>% dplyr::select(BMI) res <- brainscore.simulate(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   sim_n = 5,   subsample_size = 100,   sim_type = \"randomize_pred\",   cor_method = \"pearson\",   aggre_method = \"mean\",   minGSSize = 20,   maxGSSize = 200 ) str(res) #> List of 5 #>  $ sim_1_subsample_100: tibble [55 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars           : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_1_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_1_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_2_subsample_100: tibble [55 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars           : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_2_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_2_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_3_subsample_100: tibble [55 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars           : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_3_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_3_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_4_subsample_100: tibble [55 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars           : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_4_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_4_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_5_subsample_100: tibble [55 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars           : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_5_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_5_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"simulation-analysis-with-spin_brain-sim_type-spin_brain","dir":"Articles","previous_headings":"2. Run the Simulation Analysis","what":"2.2. Simulation analysis with spin_brain (sim_type ='spin_brain')","title":"Simulation analysis of brainscore","text":"simulate brain data spinning calculate gene set scores correlating predictor variable. parametric non-parametric tests (, based spin_brain) used. result list lists, sublist contains significance testing results term, separately without FDR correction. 1 denotes significant (p fdr-p < 0.05), 0 denotes non-significant. results fdr corrected p-values across gene sets (Dependent_vars) also available result list. However, expecting significant resutls gene set (.e., Dependent_var), FDR correction across gene sets inappropriate. Two types statistical tests performed: parametric (based lm model ; without “np”) non-parametric (based permutation brain data; “np”). permutation done spinning brain data.","code":"cov_df <- sample_df %>% dplyr::select(Age, Sex) pred_df <- sample_df %>% dplyr::select(BMI) res <- brainscore.simulate(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   sim_n = 5,   subsample_size = 100,   sim_type = \"spin_brain\",   cor_method = \"pearson\",   aggre_method = \"mean\",   n_perm = 10,   perm_id = perm_id_dk_lh_5000,   minGSSize = 20,   maxGSSize = 200 ) str(res) #> List of 5 #>  $ sim_1_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_1_subsample_100   : num [1:55] 0 0 0 1 0 0 0 0 0 0 ... #>   ..$ fdr_sim_1_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_1_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_1_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_2_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_2_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_2_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_2_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_2_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_3_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_3_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_3_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_3_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_3_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_4_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_4_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_4_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_4_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_4_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_5_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_5_subsample_100   : num [1:55] 0 0 0 1 0 0 0 0 0 0 ... #>   ..$ fdr_sim_5_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_5_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_5_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"simulation-analysis-with-spin_brain-sim_type-spin_brain-and-pre-calculated-null-gsscore","dir":"Articles","previous_headings":"2. Run the Simulation Analysis","what":"2.3. Simulation analysis with spin_brain (sim_type ='spin_brain') and pre-calculated null gsScore","title":"Simulation analysis of brainscore","text":"generation null gsScore time-consuming, can use pre-calculated null gsScore speed simulation. ensure gsScore.spin_brain generated parameters can used function, attribute gsScore.spin_brain match following argument brainscore.simulate: cor_method, aggre_method, n_perm, perm_id, minGSSize, maxGSSize.","code":"# pre-calculate the null gsScore gsScore.spin_brain <- brainscore(   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   null_model = \"spin_brain\",   n_perm = 10,   perm_id = perm_id_dk_lh_5000,   minGSSize = 20,   maxGSSize = 200 )  cov_df <- sample_df %>% dplyr::select(Age, Sex) pred_df <- sample_df %>% dplyr::select(BMI) res <- brainscore.simulate(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   gsScoreList.null = gsScore.spin_brain,   sim_n = 5,   subsample_size = 100,   sim_type = \"spin_brain\",   cor_method = \"pearson\",   aggre_method = \"mean\",   n_perm = 10,   perm_id = perm_id_dk_lh_5000,   minGSSize = 20,   maxGSSize = 200 ) str(res) #> List of 5 #>  $ sim_1_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_1_subsample_100   : num [1:55] 0 0 0 1 0 0 0 0 0 0 ... #>   ..$ fdr_sim_1_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_1_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_1_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_2_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_2_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_2_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_2_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_2_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_3_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_3_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_3_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_3_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_3_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_4_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_4_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_4_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_4_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_4_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_5_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_5_subsample_100   : num [1:55] 0 0 0 1 0 0 0 0 0 0 ... #>   ..$ fdr_sim_5_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_5_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_5_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"simulation-analysis-with-resample_gene-sim_type-resample_gene","dir":"Articles","previous_headings":"2. Run the Simulation Analysis","what":"2.4. Simulation analysis with resample_gene (sim_type ='resample_gene')","title":"Simulation analysis of brainscore","text":"simulate gene sets resampling genes calculate gene set scores correlating predictor variable. parametric non-parametric tests (, based resample_gene) used. result list lists, sublist contains significance testing results term, separately without FDR correction. 1 denotes significant (p fdr-p < 0.05), 0 denotes non-significant. results fdr corrected p-values across gene sets (Dependent_vars) also available result list. However, expecting significant resutls gene set (.e., Dependent_var), FDR correction across gene sets inappropriate. Two types statistical tests performed: parametric (based lm model ; without “np”) non-parametric (based permutation gene sets; “np”). permutation done spinning brain data.","code":"cov_df <- sample_df %>% dplyr::select(Age, Sex) pred_df <- sample_df %>% dplyr::select(BMI) res <- brainscore.simulate(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   sim_n = 5,   subsample_size = 100,   sim_type = \"resample_gene\",   cor_method = \"pearson\",   aggre_method = \"mean\",   n_perm = 10,   minGSSize = 20,   maxGSSize = 200 ) str(res) #> List of 5 #>  $ sim_1_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_1_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_1_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_1_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_1_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_2_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_2_subsample_100   : num [1:55] 0 0 1 0 1 1 0 1 0 0 ... #>   ..$ fdr_sim_2_subsample_100     : num [1:55] 0 0 1 0 1 1 0 0 0 0 ... #>   ..$ np_nofdr_sim_2_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_2_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_3_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_3_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ fdr_sim_3_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_3_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_3_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_4_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_4_subsample_100   : num [1:55] 1 1 0 0 0 0 1 0 0 0 ... #>   ..$ fdr_sim_4_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_4_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_4_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_5_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_5_subsample_100   : num [1:55] 1 0 0 0 0 0 1 0 0 0 ... #>   ..$ fdr_sim_5_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_5_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_5_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"/articles/brainscore.simulate_demo.html","id":"simulation-analysis-with-resample_gene-sim_type-resample_gene-and-pre-calculated-null-gsscore","dir":"Articles","previous_headings":"2. Run the Simulation Analysis","what":"2.5. Simulation analysis with resample_gene (sim_type ='resample_gene') and pre-calculated null gsScore","title":"Simulation analysis of brainscore","text":"generation null gsScore time-consuming, can use pre-calculated null gsScore speed simulation. , ensure gsScore.resample_gene generated parameters can used function, attribute gsScore.resample_gene match following argument brainscore.simulate: cor_method, aggre_method, n_perm, perm_id, minGSSize, maxGSSize.","code":"# pre-calculate the null gsScore gsScore.resample_gene <- brainscore(   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   null_model = \"resample_gene\",   n_perm = 10,   minGSSize = 20,   maxGSSize = 200 )  cov_df <- sample_df %>% dplyr::select(Age, Sex) pred_df <- sample_df %>% dplyr::select(BMI) res <- brainscore.simulate(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   gsScoreList.null = gsScore.resample_gene,   sim_n = 5,   subsample_size = 100,   sim_type = \"resample_gene\",   cor_method = \"pearson\",   aggre_method = \"mean\",   n_perm = 10,   minGSSize = 20,   maxGSSize = 200 ) str(res) #> List of 5 #>  $ sim_1_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_1_subsample_100   : num [1:55] 0 0 0 0 0 0 0 1 0 0 ... #>   ..$ fdr_sim_1_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_1_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_1_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_2_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_2_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 1 0 ... #>   ..$ fdr_sim_2_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_2_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_2_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_3_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_3_subsample_100   : num [1:55] 0 0 1 1 0 1 1 0 0 0 ... #>   ..$ fdr_sim_3_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_3_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_3_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_4_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_4_subsample_100   : num [1:55] 0 0 0 0 0 0 0 0 1 0 ... #>   ..$ fdr_sim_4_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_4_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_4_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>  $ sim_5_subsample_100: tibble [55 × 5] (S3: tbl_df/tbl/data.frame) #>   ..$ Dependent_vars              : chr [1:55] \"GO:0007268\" \"GO:0007416\" \"GO:0008021\" \"GO:0016079\" ... #>   ..$ nofdr_sim_5_subsample_100   : num [1:55] 0 1 0 0 0 0 1 1 0 1 ... #>   ..$ fdr_sim_5_subsample_100     : num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_nofdr_sim_5_subsample_100: num [1:55] 0 0 0 0 0 0 0 0 0 0 ... #>   ..$ np_fdr_sim_5_subsample_100  : num [1:55] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"/articles/brainscore_demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Enrichment analysis of individual-level IDPs","text":"tutorial demonstrates perform enrichment analysis individual-level imaging-derived phenotypes (IDPs) using BrainEnrich package.","code":"library(BrainEnrich) library(dplyr) library(enrichplot) library(ggplot2) library(ggseg)"},{"path":"/articles/brainscore_demo.html","id":"prepare-data-for-the-analysis","dir":"Articles","previous_headings":"","what":"1. Prepare Data for the Analysis","title":"Enrichment analysis of individual-level IDPs","text":"section, prepare data needed enrichment analysis. data simulated HCP dataset, ’ll using various pre-defined gene sets GO-MF brain data analysis.","code":""},{"path":"/articles/brainscore_demo.html","id":"load-sample-data-frame--the-data-is-simulated-from-hcp-data-","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.1. Load sample data frame. The data is simulated from HCP data.","title":"Enrichment analysis of individual-level IDPs","text":"data simulated HCP data. Let’s load inspect .","code":"data(sample_df) str(sample_df) #> 'data.frame':    100 obs. of  37 variables: #>  $ L_bankssts                : num  2.44 2.46 2.36 2.59 2.35 ... #>  $ L_caudalanteriorcingulate : num  2.57 2.29 2.67 2.84 2.14 ... #>  $ L_caudalmiddlefrontal     : num  2.58 2.53 2.85 2.85 2.32 ... #>  $ L_cuneus                  : num  2.01 1.98 1.85 1.89 1.93 ... #>  $ L_entorhinal              : num  3.37 3.47 2.77 3.19 2.73 ... #>  $ L_fusiform                : num  2.73 2.67 2.5 2.67 2.44 ... #>  $ L_inferiorparietal        : num  2.45 2.43 2.53 2.62 2.39 ... #>  $ L_inferiortemporal        : num  2.68 2.98 2.69 2.92 2.6 ... #>  $ L_isthmuscingulate        : num  2.46 2.18 2.82 2.24 2.66 ... #>  $ L_lateraloccipital        : num  2.23 2.26 2.33 2.17 2.05 ... #>  $ L_lateralorbitofrontal    : num  2.67 2.67 2.9 2.68 2.54 ... #>  $ L_lingual                 : num  2.01 2.16 1.99 2.09 2.05 ... #>  $ L_medialorbitofrontal     : num  2.18 2.54 2.46 2.33 2.16 ... #>  $ L_middletemporal          : num  2.86 2.91 2.77 3.05 2.82 ... #>  $ L_parahippocampal         : num  2.65 3.02 2.39 2.66 3.1 ... #>  $ L_paracentral             : num  2.47 2.37 2.46 2.65 2.35 ... #>  $ L_parsopercularis         : num  2.48 2.7 2.89 2.73 2.46 ... #>  $ L_parsorbitalis           : num  2.81 2.75 2.99 2.99 2.47 ... #>  $ L_parstriangularis        : num  2.43 2.61 2.75 2.46 2.32 ... #>  $ L_pericalcarine           : num  1.67 1.91 1.8 1.73 1.79 ... #>  $ L_postcentral             : num  2.16 2.1 2.17 2.22 2.14 ... #>  $ L_posteriorcingulate      : num  2.37 2.32 2.76 2.64 2.29 ... #>  $ L_precentral              : num  2.61 2.65 2.79 2.67 2.47 ... #>  $ L_precuneus               : num  2.37 2.3 2.39 2.5 2.24 ... #>  $ L_rostralanteriorcingulate: num  2.25 3 3.01 2.63 2.42 ... #>  $ L_rostralmiddlefrontal    : num  2.44 2.42 2.63 2.58 2.23 ... #>  $ L_superiorfrontal         : num  2.81 2.76 2.91 2.97 2.57 ... #>  $ L_superiorparietal        : num  2.22 2.18 2.29 2.36 2.11 ... #>  $ L_superiortemporal        : num  2.75 3.1 2.63 2.81 2.86 ... #>  $ L_supramarginal           : num  2.65 2.55 2.56 2.63 2.51 ... #>  $ L_frontalpole             : num  2.92 2.8 2.93 3.26 2.7 ... #>  $ L_temporalpole            : num  4.05 3.5 3.92 3.11 3.2 ... #>  $ L_transversetemporal      : num  2.59 2.8 2.26 2.61 2.61 ... #>  $ L_insula                  : num  2.94 2.94 3 3.18 2.74 ... #>  $ Age                       : int  36 36 29 24 31 28 29 29 26 25 ... #>  $ Sex                       : Factor w/ 2 levels \"0\",\"1\": 1 1 1 2 2 2 1 1 1 2 ... #>  $ BMI                       : num  25.2 24.9 23 26 25.4 ... colnames(sample_df) #>  [1] \"L_bankssts\"                 \"L_caudalanteriorcingulate\"  #>  [3] \"L_caudalmiddlefrontal\"      \"L_cuneus\"                   #>  [5] \"L_entorhinal\"               \"L_fusiform\"                 #>  [7] \"L_inferiorparietal\"         \"L_inferiortemporal\"         #>  [9] \"L_isthmuscingulate\"         \"L_lateraloccipital\"         #> [11] \"L_lateralorbitofrontal\"     \"L_lingual\"                  #> [13] \"L_medialorbitofrontal\"      \"L_middletemporal\"           #> [15] \"L_parahippocampal\"          \"L_paracentral\"              #> [17] \"L_parsopercularis\"          \"L_parsorbitalis\"            #> [19] \"L_parstriangularis\"         \"L_pericalcarine\"            #> [21] \"L_postcentral\"              \"L_posteriorcingulate\"       #> [23] \"L_precentral\"               \"L_precuneus\"                #> [25] \"L_rostralanteriorcingulate\" \"L_rostralmiddlefrontal\"     #> [27] \"L_superiorfrontal\"          \"L_superiorparietal\"         #> [29] \"L_superiortemporal\"         \"L_supramarginal\"            #> [31] \"L_frontalpole\"              \"L_temporalpole\"             #> [33] \"L_transversetemporal\"       \"L_insula\"                   #> [35] \"Age\"                        \"Sex\"                        #> [37] \"BMI\""},{"path":"/articles/brainscore_demo.html","id":"prepare-brain_data-for-scoring","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.2. prepare brain_data for scoring","title":"Enrichment analysis of individual-level IDPs","text":"Next, ’ll prepare brain data selecting relevant columns transforming data scoring.","code":"brain_data <- dplyr::select(sample_df, starts_with(\"L_\")) %>% t() colnames(brain_data) <- paste0(\"sub-\", 1:ncol(brain_data)) str(brain_data) #>  num [1:34, 1:100] 2.44 2.57 2.58 2.01 3.37 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:34] \"L_bankssts\" \"L_caudalanteriorcingulate\" \"L_caudalmiddlefrontal\" \"L_cuneus\" ... #>   ..$ : chr [1:100] \"sub-1\" \"sub-2\" \"sub-3\" \"sub-4\" ..."},{"path":"/articles/brainscore_demo.html","id":"load-gene-expression-data-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.3. Load gene expression data for the Analysis","title":"Enrichment analysis of individual-level IDPs","text":"now load gene expression data analysis. data based specific brain atlas (Desikan) includes gene expression levels (correlation across donnors > 0.4) left hemisphere.","code":"gene_data <- get_geneExp(atlas = \"desikan\", rdonor = \"r0.4\", hem = \"L\") str(gene_data) #>  num [1:34, 1:6513] 0.469 0.607 0.512 0.341 0.664 ... #>  - attr(*, \"dimnames\")=List of 2 #>   ..$ : chr [1:34] \"L_bankssts\" \"L_caudalanteriorcingulate\" \"L_caudalmiddlefrontal\" \"L_cuneus\" ... #>   ..$ : chr [1:6513] \"A1BG\" \"A1BG-AS1\" \"AACS\" \"AADAT\" ..."},{"path":"/articles/brainscore_demo.html","id":"load-syngo-for-the-analysis","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis","what":"1.4. Load SynGO for the Analysis","title":"Enrichment analysis of individual-level IDPs","text":"load SynGO terms used enrichment analysis. data represents gene sets associated various molecular functions.","code":"annoData <- get_annoData(type = \"SynGO\") geneSetList <- get_geneSetList(annoData) length(geneSetList) #> [1] 302 print(sprintf(\"Number of SynGO terms: %d\", length(geneSetList))) #> [1] \"Number of SynGO terms: 302\""},{"path":"/articles/brainscore_demo.html","id":"filter-the-genesetlist-optional","dir":"Articles","previous_headings":"1. Prepare Data for the Analysis > 1.4. Load SynGO for the Analysis","what":"Filter the geneSetList (Optional)","title":"Enrichment analysis of individual-level IDPs","text":"Filtering gene sets size optional shown demonstration purposes. step embedded brainenrich/brainscore function.","code":"selected.gs <- filter_geneSetList(bg_genes = colnames(gene_data), geneSetList = geneSetList, minGSSize = 20, maxGSSize = 200) print(sprintf(\"%d MF terms have gene size ranging between 20 and 200\", length(selected.gs)))"},{"path":"/articles/brainscore_demo.html","id":"get-gene-set-scores-using-brainscore","dir":"Articles","previous_headings":"","what":"2. Get gene set scores using brainscore","title":"Enrichment analysis of individual-level IDPs","text":"section, run individual enrichment analysis using prepared data.","code":""},{"path":"/articles/brainscore_demo.html","id":"get-the-raw-empirical-score-of-the-brain_data-null_modelnone","dir":"Articles","previous_headings":"2. Get gene set scores using brainscore","what":"2.1. get the raw (empirical) score of the brain_data (null_model='none')","title":"Enrichment analysis of individual-level IDPs","text":"calculate gene set scores brain data without using null model. gsScore.raw list molecular terms. molecular term, can find individual gene set scores use downstream analyses (e.g., correlation analysis, machine learning, clustering etc.).","code":"gsScore.raw <- brainscore(   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   cor_method = \"pearson\",   aggre_method = \"mean\",   n_cores = 0,   minGSSize = 20,   maxGSSize = 200,   null_model = \"none\" ) str(head(gsScore.raw)) #> List of 6 #>  $ GO:0007268: num [1:100] -0.00558 0.065401 0.039357 0.000975 0.031618 ... #>  $ GO:0007416: num [1:100] 0.0436 0.1186 0.0812 0.0398 0.0731 ... #>  $ GO:0008021: num [1:100] 0.152 0.208 0.217 0.199 0.165 ... #>  $ GO:0016079: num [1:100] -0.0882 -0.0521 -0.0869 -0.0934 -0.0353 ... #>  $ GO:0030285: num [1:100] 0.0501 0.0904 0.136 0.132 0.0852 ... #>  $ GO:0030672: num [1:100] 0.177 0.231 0.244 0.234 0.186 ..."},{"path":"/articles/brainscore_demo.html","id":"get-the-null-score-of-the-brain_data-null_modelspin_brain","dir":"Articles","previous_headings":"2. Get gene set scores using brainscore","what":"2.2. Get the null score of the brain_data (null_model='spin_brain')","title":"Enrichment analysis of individual-level IDPs","text":"Next, calculate null scores using ‘spin_brain’ null model. result list lists. sublist contains null scores molecular terms (.e. SynGO terms). useful permutation tests, compare observed results (e.g., correlation) dependent variable empirical gsScore null model gsScore.","code":"gsScore.spin <- brainscore(   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   cor_method = \"pearson\",   aggre_method = \"mean\",   n_cores = 0,   minGSSize = 20,   maxGSSize = 200,   null_model = \"spin_brain\",   n_perm = 5,   perm_id = perm_id_dk_lh_5000 ) str(head(gsScore.spin, 5), 1) #> List of 5 #>  $ null_1:List of 55 #>  $ null_2:List of 55 #>  $ null_3:List of 55 #>  $ null_4:List of 55 #>  $ null_5:List of 55"},{"path":"/articles/brainscore_demo.html","id":"get-the-null-score-of-the-resample_gene-set-null_modelresample_gene","dir":"Articles","previous_headings":"2. Get gene set scores using brainscore","what":"2.3. Get the null score of the resample_gene (set null_model='resample_gene')","title":"Enrichment analysis of individual-level IDPs","text":"result also list lists. sublist contains null scores molecular terms (.e. SynGO terms). useful permutation tests, compare observed results (e.g., correlation) dependent variable empirical gsScore null model gsScore.","code":"gsScore.resample <- brainscore(   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   cor_method = \"pearson\",   aggre_method = \"mean\",   n_cores = 0,   minGSSize = 20,   maxGSSize = 200,   null_model = \"resample_gene\",   n_perm = 5 ) str(head(gsScore.resample, 5), 1) #> List of 5 #>  $ null_1:List of 55 #>  $ null_2:List of 55 #>  $ null_3:List of 55 #>  $ null_4:List of 55 #>  $ null_5:List of 55"},{"path":"/articles/brainscore_demo.html","id":"perform-linear-regression-between-the-gsscore-and-predictors-using-brainscore-lm_test","dir":"Articles","previous_headings":"","what":"3. Perform linear regression between the gsScore and predictors using brainscore.lm_test","title":"Enrichment analysis of individual-level IDPs","text":"function brainscore.lm_test designed perform linear regression tests gsScore brain data follows: gsScore ~ predictor + covariates. cover large proportion scenarios gsScores used. predictor can either single numeric variable single two-level factor variable. covariates can data frame multiple numeric variables factors. function first get emprical statistics (.e., t-value corresponding predictor) test null model (e.g., spin_brain) get p-value.","code":""},{"path":"/articles/brainscore_demo.html","id":"normal-setup","dir":"Articles","previous_headings":"3. Perform linear regression between the gsScore and predictors using brainscore.lm_test","what":"Normal setup","title":"Enrichment analysis of individual-level IDPs","text":"demonstration purposes, performed 10 permutations set minGSSize 50. practice, may need perform permutations (e.g., 5000) reliable p-value.","code":"cov_df <- sample_df %>% dplyr::select(Age, Sex) pred_df <- sample_df %>% dplyr::select(BMI) res <- brainscore.lm_test(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   cor_method = \"pearson\",   aggre_method = \"mean\",   n_cores = 0,   minGSSize = 50,   maxGSSize = 200,   null_model = \"spin_brain\",   n_perm = 5,   perm_id = perm_id_dk_lh_5000,   pvalueCutoff = 0.8 ) res.df <- as.data.frame(res)"},{"path":"/articles/brainscore_demo.html","id":"setup-with-precomputed-null-scores","dir":"Articles","previous_headings":"3. Perform linear regression between the gsScore and predictors using brainscore.lm_test","what":"Setup with precomputed null scores","title":"Enrichment analysis of individual-level IDPs","text":"alternative previous step, can use precomputed null scores perform linear regression tests gsScore brain data. Generating null brain scores can time consuming, especially number permutations high. Therefore, recommend using precomputed null scores analysis. used null scores generated Section 2.2. attribute gsScoreList.null input function variables: cor_method, aggre_method, minGSSize, maxGSSize, null_model, n_perm, , means gsScoreList.null usable currrent setup.","code":"res1 <- brainscore.lm_test(   pred_df = pred_df,   cov_df = cov_df,   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   gsScoreList.null = gsScore.spin,   cor_method = \"pearson\",   aggre_method = \"mean\",   n_cores = 0,   minGSSize = 20,   maxGSSize = 200,   null_model = \"spin_brain\",   n_perm = 5,   pvalueCutoff = 0.8 )"},{"path":"/articles/brainscore_demo.html","id":"visualization","dir":"Articles","previous_headings":"","what":"4. Visualization","title":"Enrichment analysis of individual-level IDPs","text":"section covers visualization results. Note: upsetplot, heatplot available brainenrich resutls applicable results.","code":""},{"path":"/articles/brainscore_demo.html","id":"gene-concept-network","dir":"Articles","previous_headings":"4. Visualization","what":"4.1. Gene-Concept Network","title":"Enrichment analysis of individual-level IDPs","text":"visualize gene-concept network.","code":"geneList <- res@geneList showCategory <- 10 showID <- res@result$ID[1:showCategory] show.geneList <- geneList[showID] color_palette <- colorRampPalette(c(\"#0197b2\", \"white\", \"orange\"))(100) breaks <- seq(-3, 3, length.out = 101) geneList_colors <- color_palette[cut(show.geneList, breaks = breaks, labels = FALSE)] named_colors <- setNames(geneList_colors, names(show.geneList)) cnetplot(res,   layout = \"kk\",   color.params = list(category = named_colors),   showCategory = showCategory, cex.params = list(     category_node = 1, gene_node = 0.75,     category_label = 1.2, gene_label = 0.6   ), ) + scale_color_gradientn(colors = color_palette, limits = c(-3, 3), name = \"t value\")"},{"path":"/articles/brainscore_demo.html","id":"dot-plot","dir":"Articles","previous_headings":"4. Visualization","what":"4.2. Dot Plot","title":"Enrichment analysis of individual-level IDPs","text":"create dot plot visualize results.","code":"dotplot(res, x = \"t_Value\", label_format = 50, showCategory = 30) +   xlab(\"GS score\") + scale_fill_gradient(     high = \"#0197b2\", low = \"orange\",     space = \"Lab\", name = \"p.adjusted\"   )"},{"path":"/articles/hpc_helper_demo.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":", documented precompute null gene set scores run simulations high-performance computing (HPC) systems using Slurm. leveraging job splitting parallel processing, provide step--step instructions running distributed permutation tests simulations across multiple nodes HPC cluster. Note: intended users access HPC system want perform large-scale analyses efficiently.","code":""},{"path":"/articles/hpc_helper_demo.html","id":"installation-of-the-brainenrich-package","dir":"Articles","previous_headings":"","what":"1. Installation of the BrainEnrich package","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"","code":"# Install remotes if you haven't already if (!requireNamespace(\"remotes\", quietly = TRUE)) {   install.packages(\"remotes\") } if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } BiocManager::install(\"DOSE\") # Install brainEnrich from GitHub remotes::install_github(\"zh1peng/BrainEnrich\")"},{"path":"/articles/hpc_helper_demo.html","id":"download-gene_data-and-annodata-to-the-package","dir":"Articles","previous_headings":"","what":"2. Download gene_data and annoData to the package","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"need , available nodes HPC. download slurm job, might cause job fail due sequential download data. first node trying download data, nodes trying access data yet downloaded.","code":"library(BrainEnrich) gene_data <- get_geneExp(atlas = \"desikan\", rdonor = \"r0.4\", hem = \"L\") annoData <- get_annoData(type = \"SynGO\") annoData <- get_annoData(type = \"GO_MF\")"},{"path":[]},{"path":"/articles/hpc_helper_demo.html","id":"prepare-the-script-for-the-job_splitter-function","dir":"Articles","previous_headings":"3. use job_splitter (a generic function to split jobs) to do brainscore","what":"3.1. Prepare the script for the job_splitter function","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":", prepare script distributed computing environments, allowing large-scale permutation tests split across multiple compute nodes.","code":"# brainscore_vacc.R # Rscript brainscore_vacc.R <job_id> <n_iter_per_job> <iter_total> <cor_method> <aggre_method> <null_model> <gs_type> <minGSSize> <maxGSSize> # Get command-line arguments args <- commandArgs(trailingOnly = TRUE) job_id <- as.integer(args[1]) n_iter_per_job <- as.integer(args[2]) iter_total <- as.integer(args[3]) cor_method <- args[4] aggre_method <- args[5] null_model <- args[6] gs_type <- args[7] minGSSize <- as.integer(args[8]) maxGSSize <- as.integer(args[9])  # Load your R package and any required libraries library(BrainEnrich)  # Set other parameters output_dir_base <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/precomputed_brainscore\" data_path <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/data\"  # Load hcp brain_data brain_data <- readRDS(file.path(data_path, \"hcp_brain_data_dk_lh.RDS\")) # Load additional necessary data gene_data <- get_geneExp(atlas = \"desikan\", rdonor = \"r0.4\", hem = \"L\") annoData <- get_annoData(type = gs_type)  if (null_model == \"spin_brain\") {   subset_vars <- list(perm_id = perm_id_dk_lh_5000) } else {   subset_vars <- list() }  # Update the output directory based on the input parameters output_dir <- file.path(   output_dir_base,   sprintf(     \"%s_%s_%s_%s_%d_%d_%d\",     gs_type,     null_model,     cor_method,     aggre_method,     minGSSize,     maxGSSize,     iter_total   ) )  # Call the job_splitter function to split the jobs and run the brainscore function job_splitter(   job_id = job_id,   n_iter_per_job = n_iter_per_job,   iter_total = iter_total,   prefix = \"res_job_\",   output_dir = output_dir,   FUN = brainscore,   subset_vars = subset_vars, # perm_id will be subsetted when spliting the jobs for spin_brain mode   subset_total_var = \"n_perm\",   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   cor_method = cor_method,   aggre_method = aggre_method,   null_model = null_model,   n_cores = 1,   minGSSize = minGSSize,   maxGSSize = maxGSSize )"},{"path":"/articles/hpc_helper_demo.html","id":"prepare-the-slurm-job-file","dir":"Articles","previous_headings":"3. use job_splitter (a generic function to split jobs) to do brainscore","what":"3.2. Prepare the slurm job file","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"Note: running job_cat, detect rds files missing output_dir job failed, rerun failed jobs rerun failed jobs:","code":"#!/bin/bash #SBATCH --job-name=gsScore              # Job name #SBATCH --output=gsScore.out   #SBATCH --error=gsScore.err    #SBATCH --time=10:00:00                 # Time limit hrs:min:sec #SBATCH --nodes=1                       # Number of nodes #SBATCH --ntasks=1                      # Number of tasks #SBATCH --mem=16G                       # Memory per node #SBATCH --array=1-1000                  # Array range (adjust based on perm_total / n_perm_per_job)  # Define variables for the script n_iter_per_job=5          # Number of permutations per job (adjust as needed) iter_total=5000           # Total number of permutations cor_method=\"pearson\"      # Correlation method aggre_method=\"mean\"       # Aggregation method minGSSize=20              # Minimum gene set size maxGSSize=200             # Maximum gene set size  # Define an array of null models to loop through null_models=(\"resample_gene\" \"spin_brain\") gs_types=(\"SynGO\" \"GO_MF\")  # Change directory to where your R script is located cd /gpfs1/home/z/c/zcao4/BrainEnrich  for gs_type in \"${gs_types[@]}\"; do   for null_model in \"${null_models[@]}\"; do     Rscript --vanilla run_brainscore_hpc.R $SLURM_ARRAY_TASK_ID $n_iter_per_job $iter_total $cor_method $aggre_method $null_model $gs_type $minGSSize $maxGSSize   done done #!/bin/bash #SBATCH --job-name=gsScore_retry       # Job name #SBATCH --output=gsScore_retry_%A_%a.out     # Standard output log #SBATCH --error=gsScore_retry_%A_%a.err      # Standard error log #SBATCH --time=10:00:00                # Time limit hrs:min:sec #SBATCH --nodes=1                      # Number of nodes #SBATCH --ntasks=1                     # Number of tasks #SBATCH --mem=16G                      # Memory per node #SBATCH --array=1-5                    # Array range to cover all indices  # Define variables for the script n_iter_per_job=5          # Number of permutations per job (adjust as needed) iter_total=5000           # Total number of permutations cor_method=\"pearson\"      # Correlation method aggre_method=\"mean\"       # Aggregation method minGSSize=20              # Minimum gene set size maxGSSize=200             # Maximum gene set size null_model=\"resample_gene\" # Null model gs_type=\"GO_MF\"           # Gene set type  # Define the list of missing job IDs job_id_list=(70 74 75 76 79)  # Get the specific job ID based on the SLURM_ARRAY_TASK_ID job_id=${job_id_list[$SLURM_ARRAY_TASK_ID-1]}  # Change directory to where your R script is located cd /gpfs1/home/z/c/zcao4/BrainEnrich  # Run the R script for the specific jobs Rscript --vanilla run_brainscore_hpc.R $job_id $n_iter_per_job $iter_total $cor_method $aggre_method $null_model $gs_type $minGSSize $maxGSSize"},{"path":"/articles/hpc_helper_demo.html","id":"use-job_cat-to-collect-the-brainscore-results-from-jobs","dir":"Articles","previous_headings":"3. use job_splitter (a generic function to split jobs) to do brainscore","what":"3.3. Use job_cat to collect the brainscore results from jobs","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"","code":"library(BrainEnrich)  # Set the base output directory input_dir_base <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/precomputed_brainscore\"  # Define the parameters of the analysis n_iter_per_job <- 5 # Number of iterations per job (adjust as needed) iter_total <- 5000 # Total number of iterations cor_method <- \"pearson\" # Correlation method aggre_method <- \"mean\" # Aggregation method minGSSize <- 20 # Minimum gene set size maxGSSize <- 200 # Maximum gene set size  # Define an array of null models and gene set types to loop through null_models <- c(\"resample_gene\", \"spin_brain\") gs_types <- c(\"SynGO\", \"GO_MF\")  # Loop through each combination of null model and gene set type for (null_model in null_models) {   for (gs_type in gs_types) {     # Construct the folder name based on the parameters     folder_name <- sprintf(       \"%s_%s_%s_%s_%d_%d_%d\",       gs_type, null_model, cor_method, aggre_method, minGSSize, maxGSSize, iter_total     )      # Construct the full path to the folder     input_dir <- file.path(input_dir_base, folder_name)     output_dir <- input_dir_base      # Construct the save name based on the folder name     save_name <- folder_name      # Call the job_cat function to merge the RDS files in this folder     job_cat(       input_dir = input_dir,       output_dir = output_dir,       n_rds = iter_total / n_iter_per_job,       save_name = save_name,       file_pattern = \"res_job_%d.rds\",       delete_originals = TRUE,       preserve_attributes = TRUE,       result_prefix = \"null_\"     )   } }"},{"path":"/articles/hpc_helper_demo.html","id":"loop-through-other-input-arguments","dir":"Articles","previous_headings":"3. use job_splitter (a generic function to split jobs) to do brainscore","what":"3.4. loop through other input arguments","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"can also loop arguments slurm job file: Similar way collect results using job_cat","code":"#!/bin/bash #SBATCH --job-name=gsScore       # Job name #SBATCH --output=gsScore.out     # Standard output log #SBATCH --error=gsScore.err      # Standard error log #SBATCH --time=10:00:00          # Time limit hrs:min:sec #SBATCH --nodes=1                # Number of nodes #SBATCH --ntasks=1               # Number of tasks #SBATCH --mem=16G                # Memory per node #SBATCH --array=1-1000           # Array range (adjust based on perm_total / n_perm_per_job)  # Define variables for the script n_iter_per_job=5          # Number of permutations per job (adjust as needed) iter_total=5000           # Total number of permutations cor_method=\"pearson\"      # Correlation method minGSSize=20              # Minimum gene set size maxGSSize=200             # Maximum gene set size  # Define arrays of null models, gene set types, and aggregation methods null_models=(\"resample_gene\" \"spin_brain\") gs_types=(\"SynGO\" \"GO_MF\") aggre_methods=(\"mean\" \"median\" \"meanabs\" \"maxmean\", \"ks_weighted\", \"ks_pos_neg_sum\")  # Change directory to where your R script is located cd /gpfs1/home/z/c/zcao4/BrainEnrich  # Loop over gene set types, null models, and aggregation methods for gs_type in \"${gs_types[@]}\"; do   for null_model in \"${null_models[@]}\"; do     for aggre_method in \"${aggre_methods[@]}\"; do       Rscript --vanilla brainscore_vacc.R $SLURM_ARRAY_TASK_ID $n_iter_per_job $iter_total $cor_method $aggre_method $null_model $gs_type $minGSSize $maxGSSize     done   done done"},{"path":[]},{"path":"/articles/hpc_helper_demo.html","id":"prepare-the-script-for-the-job_splitter-function-1","dir":"Articles","previous_headings":"4. use job_splitter (a generic function to split jobs) to do brainscore.simulate","what":"4.1. Prepare the script for the job_splitter function","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":", prepare script distributed computing environments, allowing large-scale permutation tests split across multiple compute nodes.","code":"# brainscore_simulate_vacc.R # Rscript brainscore_simulate_vacc.R <job_id> <n_iter_per_job> <iter_total> <cor_method> <aggre_method> <sim_type> <gs_type> <minGSSize> <maxGSSize> <gsScoreList.null.rds file> # Get command-line arguments args <- commandArgs(trailingOnly = TRUE) job_id <- as.integer(args[1]) n_iter_per_job <- as.integer(args[2]) iter_total <- as.integer(args[3]) cor_method <- args[4] aggre_method <- args[5] sim_type <- args[6] gs_type <- args[7] minGSSize <- as.integer(args[8]) maxGSSize <- as.integer(args[9]) gsScoreList.null <- args[10]  # Load your R package and any required libraries library(BrainEnrich)  # Set other parameters output_dir_base <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/sim_res\" data_path <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/data\"  # Load hcp brain_data brain_data <- readRDS(file.path(data_path, \"hcp_brain_data_dk_lh.RDS\")) cov_df <- readRDS(file.path(data_path, \"hcp_cov_df.RDS\"))  # Assuming covariates data is stored in cov_df.RDS pred_df <- readRDS(file.path(data_path, \"hcp_pred_df.RDS\"))  # Assuming predictor data is stored in pred_df.RDS  # Load additional necessary data gene_data <- get_geneExp(atlas = \"desikan\", rdonor = \"r0.4\", hem = \"L\") annoData <- get_annoData(type = gs_type)  if (sim_type == \"spin_brain\") {   subset_vars<-list(perm_id = perm_id_dk_lh_5000) } else {   subset_vars<-list() }  if (sim_type %in% c(\"resample_gene\",\"spin_brain\")){   gsScoreList.null <- readRDS(gsScoreList.null) }  # Update the output directory based on the input parameters output_dir <- file.path(   output_dir_base,   sprintf(     \"%s_%s_%s_%s_%d_%d_%d\",     gs_type,     sim_type,     cor_method,     aggre_method,     minGSSize,     maxGSSize,     iter_total   ) )  # Call the job_splitter function job_splitter(   job_id = job_id,   n_iter_per_job = n_iter_per_job,   iter_total = iter_total,   output_dir = output_dir,   FUN = brainscore.simulate,   subset_vars = subset_vars,  # perm_id will be subsetted when spliting the jobs for spin_brain mode   subset_total_var = 'sim_n',   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   pred_df = pred_df,   cov_df = cov_df,   cor_method = cor_method,   aggre_method = aggre_method,   subsample_size = c(100,200,300),   sim_type = sim_type,   n_cores = 1,   minGSSize = minGSSize,   maxGSSize = maxGSSize,   n_perm = 5000, # should match gsScoreList   gsScoreList.null = gsScoreList.null  # precomputed null gene set scores as specified by the user )"},{"path":"/articles/hpc_helper_demo.html","id":"prepare-the-slurm-job-file-1","dir":"Articles","previous_headings":"4. use job_splitter (a generic function to split jobs) to do brainscore.simulate","what":"4.2. Prepare the slurm job file","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"","code":"#!/bin/bash #SBATCH --job-name=brainscore_sim    # Job name #SBATCH --output=sim.out  # Standard output log #SBATCH --error=sim.err   # Standard error log #SBATCH --time=24:00:00             # Time limit hrs:min:sec #SBATCH --nodes=1                    # Number of nodes #SBATCH --ntasks=1                   # Number of tasks #SBATCH --mem=16G                    # Memory per node #SBATCH --array=1-1000               # Array range (adjust based on iter_total / n_iter_per_job)  # Define the variables n_iter_per_job=1          # Number of iterations per job iter_total=1000          # Total number of iterations cor_method=\"pearson\"      # Correlation method aggre_method=\"mean\"       # Aggregation method minGSSize=20              # Minimum gene set size maxGSSize=200             # Maximum gene set size sim_types=(\"randomize_pred\" \"spin_brain\" \"resample_gene\")  # Simulation types gs_types=(\"SynGO\")  # Gene set types  # Change to the directory where the R script is located cd /gpfs1/home/z/c/zcao4/BrainEnrich  # Loop through each combination of simulation type and gene set type for gs_type in \"${gs_types[@]}\"; do   for sim_type in \"${sim_types[@]}\"; do          if [[ \"$sim_type\" == \"randomize_pred\" ]]; then       # Run the script without gsScoreList.null for randomize_pred       Rscript --vanilla brainscore_simulate_vacc.R $SLURM_ARRAY_TASK_ID $n_iter_per_job $iter_total $cor_method $aggre_method $sim_type $gs_type $minGSSize $maxGSSize \"\"     else       # Set the gsScoreList.null file path based on the current analysis parameters       gsScoreList_null=\"/gpfs1/home/z/c/zcao4/BrainEnrich/precomputed_brainscore/${gs_type}_${sim_type}_${cor_method}_${aggre_method}_${minGSSize}_${maxGSSize}_5000.rds\"              # Run the script with gsScoreList.null for other simulation types       Rscript --vanilla brainscore_simulate_vacc.R $SLURM_ARRAY_TASK_ID $n_iter_per_job $iter_total $cor_method $aggre_method $sim_type $gs_type $minGSSize $maxGSSize $gsScoreList_null     fi        done done"},{"path":"/articles/hpc_helper_demo.html","id":"use-job_cat-to-collect-the-brainscore-results-from-jobs-1","dir":"Articles","previous_headings":"4. use job_splitter (a generic function to split jobs) to do brainscore.simulate","what":"4.3. Use job_cat to collect the brainscore results from jobs","title":"How to precompute null gene set scores and do simulation on HPC with slurm","text":"","code":"library(BrainEnrich) input_dir <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/sim_res/SynGO_spin_brain_pearson_mean_20_200_1000\" output_dir <- \"/gpfs1/home/z/c/zcao4/BrainEnrich/sim_res\" tmp <- job_cat(input_dir = input_dir, output_dir = output_dir, n_rds = 1000, delete_originals = TRUE)"},{"path":"/articles/prepare_annoDat.html","id":"gene-ontology-go-gene-sets","dir":"Articles","previous_headings":"","what":"Gene ontology (GO) gene sets","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"get_GO_data <- getFromNamespace(\"get_GO_data\", \"clusterProfiler\") annoData <- get_GO_data(\"org.Hs.eg.db\", ont = \"BP\", keytype = \"SYMBOL\") # saveRDS(annoData, file = \"extdata/geneSets/GO_BP.rds\", compress = \"xz\") annoData <- get_GO_data(\"org.Hs.eg.db\", ont = \"MF\", keytype = \"SYMBOL\") # saveRDS(annoData, file = \"extdata/geneSets/GO_MF.rds\", compress = \"xz\") annoData <- get_GO_data(\"org.Hs.eg.db\", ont = \"CC\", keytype = \"SYMBOL\") saveRDS(annoData, file = \"inst/extdata/geneSets/GO_CC.rds\", compress = \"xz\")  # check version of org.Hs.eg.db packageVersion(\"clusterProfiler\") packageVersion(\"org.Hs.eg.db\")"},{"path":"/articles/prepare_annoDat.html","id":"disgenet-gene-sets","dir":"Articles","previous_headings":"","what":"DisGeNET gene sets","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"get_DGN_data <- getFromNamespace(\"get_DGN_data\", \"DOSE\") annoData <- get_DGN_data() test1 <- get_geneSetList(annoData) str(head(test1)) get_termDescription(\"C0001546\", annoData) annoData <- symbol_annoData(annoData) test2 <- get_geneSetList(annoData) str(head(test2))  saveRDS(annoData, file = \"inst/extdata/geneSets/DGN.rds\", compress = \"xz\") packageVersion(\"DOSE\") packageVersion(\"AnnotationDbi\")"},{"path":"/articles/prepare_annoDat.html","id":"kegg-modules","dir":"Articles","previous_headings":"","what":"KEGG modules","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"prepare_KEGG <- getFromNamespace(\"prepare_KEGG\", \"clusterProfiler\") annoData <- prepare_KEGG(\"hsa\", \"MKEGG\", \"ncbi-geneid\") test1 <- get_geneSetList(annoData) str(head(test1))  annoData <- symbol_annoData(annoData) test2 <- get_geneSetList(annoData) str(head(test2)) get_termDescription(\"M00124\", annoData) saveRDS(annoData, file = \"inst/extdata/geneSets/MKEGG.rds\", compress = \"xz\")  packageVersion(\"clusterProfiler\")"},{"path":"/articles/prepare_annoDat.html","id":"kegg-pathways","dir":"Articles","previous_headings":"","what":"KEGG pathways","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"prepare_KEGG <- getFromNamespace(\"prepare_KEGG\", \"clusterProfiler\") annoData <- prepare_KEGG(\"hsa\", \"KEGG\", \"ncbi-geneid\") test1 <- get_geneSetList(annoData) str(head(test1))  annoData <- symbol_annoData(annoData) test2 <- get_geneSetList(annoData) str(head(test2)) get_termDescription(\"hsa03008\", annoData) saveRDS(annoData, file = \"inst/extdata/geneSets/KEGG.rds\", compress = \"xz\") packageVersion(\"clusterProfiler\")"},{"path":"/articles/prepare_annoDat.html","id":"wikipathways","dir":"Articles","previous_headings":"","what":"WikiPathways","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"prepare_WP_data <- getFromNamespace(\"prepare_WP_data\", \"clusterProfiler\") wpdata <- prepare_WP_data(\"Homo sapiens\") TERM2GENE <- wpdata$WPID2GENE TERM2NAME <- wpdata$WPID2NAME build_Anno <- getFromNamespace(\"build_Anno\", \"DOSE\") annoData <- build_Anno(TERM2GENE, TERM2NAME)  test1 <- get_geneSetList(annoData) str(head(test1))  annoData <- symbol_annoData(annoData) test2 <- get_geneSetList(annoData) str(head(test2)) get_termDescription(\"WP2338\", annoData) saveRDS(annoData, file = \"inst/extdata/geneSets/WikiPathways.rds\", compress = \"xz\") packageVersion(\"clusterProfiler\")"},{"path":"/articles/prepare_annoDat.html","id":"reactome","dir":"Articles","previous_headings":"","what":"Reactome","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"get_Reactome_DATA <- getFromNamespace(\"get_Reactome_DATA\", \"ReactomePA\") annoData <- get_Reactome_DATA(\"human\") test1 <- get_geneSetList(annoData) str(head(test1))  annoData <- symbol_annoData(annoData) test2 <- get_geneSetList(annoData) str(head(test2)) get_termDescription(\"R-HSA-1059683\", annoData) saveRDS(annoData, file = \"inst/extdata/geneSets/Reactome.rds\", compress = \"xz\") packageVersion(\"ReactomePA\")"},{"path":"/articles/prepare_annoDat.html","id":"syngo-how-to-make-annodat-from-xlsx","dir":"Articles","previous_headings":"","what":"SynGO (how to make annoDat from xlsx)","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"# Define URL for downloading SynGO data url <- \"https://www.syngoportal.org/data/SynGO_bulk_download_release_20231201.zip\" # Create temporary file and directory zip_path <- tempfile(fileext = \".zip\") temp_dir <- tempdir() # Clean-up function to ensure temp files are removed on.exit(   {     if (file.exists(zip_path)) unlink(zip_path)     if (file.exists(extracted_file)) unlink(extracted_file)   },   add = TRUE ) extracted_file <- file.path(temp_dir, \"syngo_ontologies.xlsx\") download.file(url, zip_path, mode = \"wb\") unzip(zip_path, files = \"syngo_ontologies.xlsx\", exdir = temp_dir)   # Read the data from the extracted file data <- read_xlsx(extracted_file)  # Process TERM2GENE TERM2GENE <- data %>%   dplyr::select(id, hgnc_symbol) %>%   dplyr::rename(term = id, gene = hgnc_symbol) %>%   dplyr::mutate(gene = strsplit(gene, \", \")) %>%   unnest(cols = c(gene))  # Process TERM2NAME TERM2NAME <- data %>%   dplyr::select(id, name) %>%   dplyr::rename(term = id, description = name)  # Use build_Anno function from DOSE package build_Anno <- getFromNamespace(\"build_Anno\", \"DOSE\") annoData <- build_Anno(TERM2GENE, TERM2NAME) # saveRDS(annoData, file = \"extdata/geneSets/SynGO.rds\",compress='xz')"},{"path":[]},{"path":"/articles/prepare_annoDat.html","id":"seidlitz-j--nadig-a--liu-s--bethlehem-r--a--vértes-p--e--morgan-s--e--raznahan-a--2020--transcriptomic-and-cellular-decoding-of-regional-brain-vulnerability-to-neurogenetic-disorders--nature-communications-111-3358-","dir":"Articles","previous_headings":"CellTypes Seidlitz2020 (how to prepare annoData with a csv file)","what":"Seidlitz, J., Nadig, A., Liu, S., Bethlehem, R. A., Vértes, P. E., Morgan, S. E., … & Raznahan, A. (2020). Transcriptomic and cellular decoding of regional brain vulnerability to neurogenetic disorders. Nature communications, 11(1), 3358.","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"library(dplyr) # Define URL for Seidlitz2020 url <- \"https://github.com/jms290/PolySyn_MSNs/blob/master/Data/AHBA/celltypes_PSP.csv?raw=true\"  # Create temporary file temp_file <- tempfile() # Clean-up function to ensure temp files are removed on.exit(   {     if (file.exists(temp_file)) unlink(temp_file)   },   add = TRUE )  download.file(url, temp_file, mode = \"wb\")  # Read CSV file TERM2GENE <- read.csv(temp_file) %>%   dplyr::mutate(term = class) %>%   filter(gene != \"\") %>%   dplyr::select(term, gene)  key_dict <- c(   \"Astro\" = \"Astrocytes\",   \"Endo\" = \"Endothelial\",   \"Micro\" = \"Microglial\",   \"OPC\" = \"Oligodendrocyte Progenitors\",   \"Neuro-Ex\" = \"Excitatory Neurons\",   \"Neuro-In\" = \"Inhibitory Neurons\",   \"Oligo\" = \"Oligodendrocytes\" )  TERM2NAME <- TERM2GENE %>%   dplyr::mutate(description = dplyr::recode(term, !!!key_dict)) %>%   dplyr::select(term, description) annoData <- build_Anno(TERM2GENE, TERM2NAME) test1 <- get_geneSetList(annoData) str(head(test1)) get_termDescription(term = \"Astro\", annoData)  saveRDS(annoData, file = \"inst/extdata/geneSets/CellTypes_Seidlitz2020.rds\", compress = \"xz\")"},{"path":[]},{"path":"/articles/prepare_annoDat.html","id":"lake-b--b--chen-s--sos-b--c--fan-j--kaeser-g--e--yung-y--c--zhang-k--2018--integrative-single-cell-analysis-of-transcriptional-and-epigenetic-states-in-the-human-adult-brain--nature-biotechnology-361-70-80-","dir":"Articles","previous_headings":"CellTypes Lake2018 (how to prepare annoData from a gmt file)","what":"Lake, B. B., Chen, S., Sos, B. C., Fan, J., Kaeser, G. E., Yung, Y. C., … & Zhang, K. (2018). Integrative single-cell analysis of transcriptional and epigenetic states in the human adult brain. Nature biotechnology, 36(1), 70-80.","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"# Define URL for Lake2018 url <- \"https://github.com/molecular-neuroimaging/Imaging_Transcriptomics/raw/main/imaging_transcriptomics/data/geneset_LAKE.gmt\" # Create temporary file temp_file <- tempfile() # Clean-up function to ensure temp files are removed on.exit(   {     if (file.exists(temp_file)) unlink(temp_file)   },   add = TRUE )   download.file(url, temp_file, mode = \"wb\") # Read GMT file TERM2GENE <- suppressWarnings({   clusterProfiler::read.gmt(temp_file) %>%     filter(gene != \"\") %>%     dplyr::select(term, gene) })  key_dict <- c(   # Excitatory Neurons   \"Ex1\" = \"Excitatory Neurons 1\",   \"Ex2\" = \"Excitatory Neurons 2\",   \"Ex3a\" = \"Excitatory Neurons 3a\",   \"Ex3b\" = \"Excitatory Neurons 3b\",   \"Ex3c\" = \"Excitatory Neurons 3c\",   \"Ex3d\" = \"Excitatory Neurons 3d\",   \"Ex3e\" = \"Excitatory Neurons 3e\",   \"Ex4\" = \"Excitatory Neurons 4\",   \"Ex5a\" = \"Excitatory Neurons 5a\",   \"Ex5b\" = \"Excitatory Neurons 5b\",   \"Ex6a\" = \"Excitatory Neurons 6a\",   \"Ex6b\" = \"Excitatory Neurons 6b\",   \"Ex8\" = \"Excitatory Neurons 8\",    # Granule Cells (Cerebellar)   \"Gran\" = \"Cerebellar Granule Cells\",    # Inhibitory Neurons   \"In1a\" = \"Inhibitory Neurons 1a\",   \"In1b\" = \"Inhibitory Neurons 1b\",   \"In1c\" = \"Inhibitory Neurons 1c\",   \"In2\" = \"Inhibitory Neurons 2\",   \"In3\" = \"Inhibitory Neurons 3\",   \"In4a\" = \"Inhibitory Neurons 4a\",   \"In4b\" = \"Inhibitory Neurons 4b\",   \"In6a\" = \"Inhibitory Neurons 6a\",   \"In6b\" = \"Inhibitory Neurons 6b\",   \"In7\" = \"Inhibitory Neurons 7\",   \"In8\" = \"Inhibitory Neurons 8\",    # Purkinje Cells (Cerebellar Neurons)   \"Purk1\" = \"Purkinje Cells 1\",   \"Purk2\" = \"Purkinje Cells 2\",    # Non-Neuronal Cells   \"End\" = \"Endothelial Cells\",   \"Per\" = \"Pericytes/Smooth Muscle Cells\",   \"Ast\" = \"Astrocytes\",   \"Ast_Cer\" = \"Cerebellar Astrocytes\",   \"Oli\" = \"Oligodendrocytes\",   \"OPC\" = \"Oligodendrocyte Progenitor Cells\",   \"OPC_Cer\" = \"Cerebellar OPCs\",   \"Mic\" = \"Microglia\" )     TERM2NAME <- TERM2GENE %>%   dplyr::mutate(description = dplyr::recode(term, !!!key_dict)) %>%   dplyr::select(term, description) unique(TERM2NAME)  annoData <- build_Anno(TERM2GENE, TERM2NAME) test1 <- get_geneSetList(annoData) str(head(test1)) get_termDescription(term = \"Ast\", annoData)  saveRDS(annoData, file = \"inst/extdata/geneSets/CellTypes_Lake2018.rds\", compress = \"xz\")"},{"path":[]},{"path":"/articles/prepare_annoDat.html","id":"imaging-transcriptomics-convergent-cellular-transcriptomic-and-molecular-neuroimaging-signatures-in-the-healthy-adult-human-brain--daniel-martins-alessio-giacomel-steven-cr-williams-federico-turkheimer-ottavia-dipasquale-mattia-veronese-pet-templates-working-group--cell-reports-","dir":"Articles","previous_headings":"CellTypes Martins2021 (how to prepare annoData with a gmt file)","what":"Imaging transcriptomics: Convergent cellular, transcriptomic, and molecular neuroimaging signatures in the healthy adult human brain. Daniel Martins, Alessio Giacomel, Steven CR Williams, Federico Turkheimer, Ottavia Dipasquale, Mattia Veronese, PET templates working group. Cell Reports.","title":"How to prepare gene sets (annoDat) for the analysis","text":"","code":"# Define URL for Martins2021 url <- \"https://github.com/molecular-neuroimaging/Imaging_Transcriptomics/raw/main/imaging_transcriptomics/data/geneset_Pooled.gmt\" # Create temporary file temp_file <- tempfile() # Clean-up function to ensure temp files are removed on.exit(   {     if (file.exists(temp_file)) unlink(temp_file)   },   add = TRUE ) download.file(url, temp_file, mode = \"wb\") # Read GMT file TERM2GENE <- suppressWarnings({   clusterProfiler::read.gmt(temp_file) %>%     filter(gene != \"\") %>%     dplyr::select(term, gene) })  key_dict <- c(   \"Astro\" = \"Astrocytes\",   \"Endo\" = \"Endothelial Cells\",   \"Microglia\" = \"Microglial Cells\",   \"Neuro_Exc\" = \"Excitatory Neurons\",   \"Neuro_Inb\" = \"Inhibitory Neurons\",   \"Oligo\" = \"Oligodendrocytes\",   \"OPC\" = \"Oligodendrocyte Progenitor Cells\" )  TERM2NAME <- TERM2GENE %>%   dplyr::mutate(description = dplyr::recode(term, !!!key_dict)) %>%   dplyr::select(term, description) unique(TERM2NAME) annoData <- build_Anno(TERM2GENE, TERM2NAME) test1 <- get_geneSetList(annoData) str(head(test1)) get_termDescription(term = \"Astro\", annoData) saveRDS(annoData, file = \"inst/extdata/geneSets/CellTypes_Martins2021.rds\", compress = \"xz\")"},{"path":"/articles/prepare_annoDat.html","id":"mesh","dir":"Articles","previous_headings":"","what":"MeSH","title":"How to prepare gene sets (annoDat) for the analysis","text":"First define function prepare MeSH data figure one category, can make loop gene2pubmed","code":"get_MeSH_data <- function(MeSH.hsa.db, MeSH.db, database, category) {   category <- toupper(category)   categories <- c(     \"A\", \"B\", \"C\", \"D\",     \"E\", \"F\", \"G\", \"H\",     \"I\", \"J\", \"K\", \"L\",     \"M\", \"N\", \"V\", \"Z\"   )    if (!all(category %in% categories)) {     stop(\"please check your 'category' parameter...\")   }    mesh <- AnnotationDbi::select(MeSH.hsa.db, keys = database, columns = c(\"GENEID\", \"MESHID\", \"MESHCATEGORY\"), keytype = \"SOURCEDB\")   mesh <- mesh[mesh[, 3] %in% category, ]   mesh2gene <- mesh[, c(2, 1)]   mesh2name <- AnnotationDbi::select(MeSH.db, keys = unique(mesh2gene[, 1]), columns = c(\"MESHID\", \"MESHTERM\"), keytype = \"MESHID\")   build_Anno(mesh2gene, mesh2name) } BiocManager::install(\"AnnotationHub\") BiocManager::install(\"MeSHDbi\")  library(AnnotationHub) library(MeSHDbi)  # prepare MeSH.hsa.db (it is a gene-MeSH db) ah <- AnnotationHub(cache = \"C:/Users/Zhipeng/AppData/Local/Temp/Rtmpe24TtF/BiocFileCache\", localHub = TRUE) # localHub=TRUE if you have downloaded the data hsa <- query(ah, c(\"MeSHDb\", \"Homo sapiens\")) file_hsa <- hsa[[1]] MeSH.hsa.db <- MeSHDbi::MeSHDb(file_hsa)  # prepare MeSH.db (it is a name db) ah <- AnnotationHub(localHub = TRUE) # cache=\"C:/Users/Zhipeng/AppData/Local/R/cache/R/AnnotationHub/205c177937a_98389\" dbfile1 <- query(ah, c(\"MeSHDb\", \"MeSH.db\"))[[1]] MeSH.db <- MeSHDbi::MeSHDb(dbfile1)  annoData <- get_MeSH_data(MeSH.hsa.db = MeSH.hsa.db, MeSH.db = MeSH.db, database = \"gene2pubmed\", category = \"F\") test1 <- get_geneSetList(annoData) str(head(test1)) get_termDescription(term = \"D003071\", annoData)  annoData <- symbol_annoData(annoData) test2 <- get_geneSetList(annoData) str(head(test2)) length(test2) saveRDS(annoData, file = \"inst/extdata/geneSets/test.rds\", compress = \"xz\") for (cat_i in c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"V\", \"Z\")) {   message(\"Preparing category: \", cat_i)   # Fetching the MeSH data for the specified category   annoData <- get_MeSH_data(MeSH.hsa.db = MeSH.hsa.db, MeSH.db = MeSH.db, database = \"gene2pubmed\", category = cat_i)   geneSetList <- get_geneSetList(annoData)   if (length(geneSetList) == 0) {     message(\"No gene set found for category: \", cat_i)   } else {     message(\"Converting gene IDs to gene symbols for category: \", cat_i)     annoData <- symbol_annoData(annoData)     message(\"Saving annoData for category: \", cat_i)     saveRDS(annoData, file = paste0(\"inst/extdata/geneSets/MeSH_\", cat_i, \".rds\"), compress = \"xz\")   } }"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhipeng Cao. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cao Z, Zhan G, Qin J, Cupertino R, Ottino-Gonzalez J, Murphy , Pancholi D, Hahn S, Yuan D, Callas P, Mackey S, Garavan H (2024). “Unraveling molecular relevance brain phenotypes: comparative analysis null models test statistics.” Neuroimage, 293, 120622.","code":"@Article{,   title = {Unraveling the molecular relevance of brain phenotypes: A comparative analysis of null models and test statistics},   author = {Zhipeng Cao and Guilai Zhan and Jinmei Qin and Renata B Cupertino and Jonatan Ottino-Gonzalez and Alistair Murphy and Devarshi Pancholi and Sage Hahn and Dekang Yuan and Peter Callas and Scott Mackey and Hugh Garavan},   journal = {Neuroimage},   year = {2024},   volume = {293},   pages = {120622},   publisher = {Elsevier}, }"},{"path":[]},{"path":"/index.html","id":"aim-of-the-toolbox-dart","dir":"","previous_headings":"","what":"Aim of the Toolbox 🎯","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"BrainEnrich R package designed facilitate correlation imaging-derived phenotypes transcriptional profiles. toolbox aims provide researchers clinicians robust statistical tools uncover molecular architectures associated cognitive functions, brain development, disorders.","code":""},{"path":"/index.html","id":"timeline-of-development-spiral_calendar","dir":"","previous_headings":"","what":"Timeline of Development 🗓️","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"Q4 2023: Initial conceptualization development core functions. 🛠️ Q1 2024: Implementation competitive null models self-contained null models. 🧪 Q1 2024: Testing simulated datasets refinement statistical tests. 🔬 Q2 2024: Beta release community feedback additional testing. 🔄 Q3 2024: Incorporation feedback preparation CRAN submission. ✍️ Q4 2024: Submission CRAN publication accompanying paper. 📰","code":""},{"path":"/index.html","id":"installation-floppy_disk","dir":"","previous_headings":"","what":"Installation 💾","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"Please note brainEnrich currently development yet available installation. available, can installed GitHub via devtools package:","code":"# Install remotes if you haven't already if (!requireNamespace(\"remotes\", quietly = TRUE)) {       install.packages(\"remotes\")} if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(\"DOSE\") # Install brainEnrich from GitHub remotes::install_github(\"zh1peng/BrainEnrich\")"},{"path":"/index.html","id":"usage-open_book","dir":"","previous_headings":"","what":"Usage 📖","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"Instructions use toolbox provided , including example code.","code":""},{"path":"/index.html","id":"to-do-list-clipboard","dir":"","previous_headings":"","what":"To-Do List 📋","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"Initialize project 2023/11/04 Finalize manuscript revision. 🔧 Development core functions🔧 Create detailed vignettes major function. 📚 Optimize performance large datasets. ⚡ Conduct extensive testing real-world data. 🌏 Develop comprehensive test suite. ✅ Set continuous integration automated testing. 🔄 Prepare documentation public release. 📄","code":""},{"path":[]},{"path":"/index.html","id":"versioning-label","dir":"","previous_headings":"","what":"Versioning 🏷️","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"use git versioning. versions available, see tags repository.","code":""},{"path":"/index.html","id":"authors-woman_technologistman_technologist","dir":"","previous_headings":"","what":"Authors 👩‍💻👨‍💻","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"Zhipeng Cao @ Xuhui Mental Health Center, Shanghai - Initial work - zh1peng","code":""},{"path":"/index.html","id":"license-scroll","dir":"","previous_headings":"","what":"License 📜","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features Through Transcriptomic Enrichment","text":"project licensed GNU Affero General Public (AGP) License - see LICENSE.md file details.","code":""},{"path":[]},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":[]},{"path":"/Readme.html","id":"aim-of-the-toolbox-dart","dir":"","previous_headings":"","what":"Aim of the Toolbox 🎯","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"BrainEnrich R package designed facilitate correlation imaging-derived phenotypes transcriptional profiles. toolbox aims provide researchers clinicians robust statistical tools uncover molecular architectures associated cognitive functions, brain development, disorders.","code":""},{"path":"/Readme.html","id":"timeline-of-development-spiral_calendar","dir":"","previous_headings":"","what":"Timeline of Development 🗓️","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"Q4 2023: Initial conceptualization development core functions. 🛠️ Q1 2024: Implementation competitive null models self-contained null models. 🧪 Q1 2024: Testing simulated datasets refinement statistical tests. 🔬 Q2 2024: Beta release community feedback additional testing. 🔄 Q3 2024: Incorporation feedback preparation CRAN submission. ✍️ Q4 2024: Submission CRAN publication accompanying paper. 📰","code":""},{"path":"/Readme.html","id":"installation-floppy_disk","dir":"","previous_headings":"","what":"Installation 💾","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"Please note brainEnrich currently development yet available installation. available, can installed GitHub via devtools package:","code":"# Install remotes if you haven't already if (!requireNamespace(\"remotes\", quietly = TRUE)) {       install.packages(\"remotes\")} if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") } BiocManager::install(\"DOSE\") # Install brainEnrich from GitHub remotes::install_github(\"zh1peng/BrainEnrich\")"},{"path":"/Readme.html","id":"usage-open_book","dir":"","previous_headings":"","what":"Usage 📖","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"Instructions use toolbox provided , including example code.","code":""},{"path":"/Readme.html","id":"to-do-list-clipboard","dir":"","previous_headings":"","what":"To-Do List 📋","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"Initialize project 2023/11/04 Finalize manuscript revision. 🔧 Development core functions🔧 Create detailed vignettes major function. 📚 Optimize performance large datasets. ⚡ Conduct extensive testing real-world data. 🌏 Develop comprehensive test suite. ✅ Set continuous integration automated testing. 🔄 Prepare documentation public release. 📄","code":""},{"path":[]},{"path":"/Readme.html","id":"versioning-label","dir":"","previous_headings":"","what":"Versioning 🏷️","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"use git versioning. versions available, see tags repository.","code":""},{"path":"/Readme.html","id":"authors-woman_technologistman_technologist","dir":"","previous_headings":"","what":"Authors 👩‍💻👨‍💻","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"Zhipeng Cao @ Xuhui Mental Health Center, Shanghai - Initial work - zh1peng","code":""},{"path":"/Readme.html","id":"license-scroll","dir":"","previous_headings":"","what":"License 📜","title":"BrainEnrich: Revealing Biological Insights from Imaging-Derived Features through Transcriptomic Enrichment 🧠🧬","text":"project licensed GNU Affero General Public (AGP) License - see LICENSE.md file details.","code":""},{"path":[]},{"path":"/reference/aggregate_geneSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Gene Set Scores — aggregate_geneSet","title":"Aggregate Gene Set Scores — aggregate_geneSet","text":"Function aggregate geneList based geneSet, evaluating one geneSet time. function supports multiple aggregation methods specified user.","code":""},{"path":"/reference/aggregate_geneSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Gene Set Scores — aggregate_geneSet","text":"","code":"aggregate_geneSet(   geneList,   geneSet,   method = c(\"mean\", \"median\", \"meanabs\", \"meansqr\", \"maxmean\", \"ks_orig\", \"ks_weighted\",     \"ks_pos_neg_sum\", \"sign_test\", \"rank_sum\") )"},{"path":"/reference/aggregate_geneSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Gene Set Scores — aggregate_geneSet","text":"geneList matrix genes models, column representing true null model. geneSet vector containing names genes gene set interest. method character string specifying method use aggregation. Options include 'mean', 'median', 'meanabs', 'meansqr', 'maxmean', 'sign_test', 'rank_sum', 'ks_orig', 'ks_weighted', 'ks_pos_neg_sum','custom'. Default 'mean'. custom function takes (genelist, geneSet) input provided, function use custom aggregation, set method 'custom'.","code":""},{"path":"/reference/aggregate_geneSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Gene Set Scores — aggregate_geneSet","text":"Returns numeric score based specified aggregation method.","code":""},{"path":"/reference/aggregate_geneSetList.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Gene Set List in Parallel — aggregate_geneSetList","title":"Aggregate Gene Set List in Parallel — aggregate_geneSetList","text":"function aggregates gene sets parallel using parLapply function parallel package, ensuring cross-platform compatibility.","code":""},{"path":"/reference/aggregate_geneSetList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Gene Set List in Parallel — aggregate_geneSetList","text":"","code":"aggregate_geneSetList(geneList, geneSetList, method, n_cores = 1)"},{"path":"/reference/aggregate_geneSetList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Gene Set List in Parallel — aggregate_geneSetList","text":"geneList list genes. geneSetList list gene sets aggregated. method aggregation method used. n_cores Number cores use parallel processing. Default 1. set 0, uses available cores minus one.","code":""},{"path":"/reference/aggregate_geneSetList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Gene Set List in Parallel — aggregate_geneSetList","text":"list aggregated gene set scores.","code":""},{"path":"/reference/aggregate_geneSetList_matching_coexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Gene Set List with Matching Coexpression in Parallel — aggregate_geneSetList_matching_coexp","title":"Aggregate Gene Set List with Matching Coexpression in Parallel — aggregate_geneSetList_matching_coexp","text":"function swaps gene sets geneSetList sampled_geneSetList (coexpression matched, see resample_geneSetList_matching_coexp) aggregates gene set scores parallel.","code":""},{"path":"/reference/aggregate_geneSetList_matching_coexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Gene Set List with Matching Coexpression in Parallel — aggregate_geneSetList_matching_coexp","text":"","code":"aggregate_geneSetList_matching_coexp(   geneList.true,   geneSetList,   sampled_geneSetList,   method,   n_cores = 1 )"},{"path":"/reference/aggregate_geneSetList_matching_coexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Gene Set List with Matching Coexpression in Parallel — aggregate_geneSetList_matching_coexp","text":"geneList.true m x 1 matrix true association values. row corresponds gene, column contains association values gene brain. geneSetList list gene sets. sampled_geneSetList list sampled gene sets. method method used aggregation. n_cores Number cores use parallel processing. Default 1. set 0, uses available cores minus one.","code":""},{"path":"/reference/aggregate_geneSetList_matching_coexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Gene Set List with Matching Coexpression in Parallel — aggregate_geneSetList_matching_coexp","text":"list aggregated gene set scores.","code":""},{"path":"/reference/ask_user_continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Prompt User to Continue with Yes/No Input — ask_user_continue","title":"Prompt User to Continue with Yes/No Input — ask_user_continue","text":"function continuously prompts user message asking whether want continue. accepts either 'Y' (Yes) 'N' () valid inputs. function keep prompting user provide valid input.","code":""},{"path":"/reference/ask_user_continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prompt User to Continue with Yes/No Input — ask_user_continue","text":"","code":"ask_user_continue(msg)"},{"path":"/reference/ask_user_continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prompt User to Continue with Yes/No Input — ask_user_continue","text":"msg character string containing message display user prompt.","code":""},{"path":"/reference/ask_user_continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prompt User to Continue with Yes/No Input — ask_user_continue","text":"logical value: TRUE user inputs 'Y' (Yes), FALSE user inputs 'N' ().","code":""},{"path":"/reference/brainenrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Brain Gene Set Analysis — brainenrich","title":"Perform Brain Gene Set Analysis — brainenrich","text":"function performs gene set analysis using group-level brain data. aggregates associations gene expression data brain data within gene sets annotation data. empirical aggregation score compared null distribution generated selected null model. function supports user-defined correlation aggregation methods allowing use custom functions.","code":""},{"path":"/reference/brainenrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Brain Gene Set Analysis — brainenrich","text":"","code":"brainenrich(   brain_data,   gene_data,   annoData,   cor_method = c(\"pearson\", \"spearman\", \"pls1c\", \"pls1w\"),   aggre_method = c(\"mean\", \"median\", \"meanabs\", \"meansqr\", \"maxmean\", \"ks_orig\",     \"ks_weighted\", \"ks_pos_neg_sum\", \"sign_test\", \"rank_sum\"),   null_model = c(\"spin_brain\", \"resample_gene\", \"coexp_matched\"),   minGSSize = 10,   maxGSSize = 200,   n_cores = 0,   n_perm = 5000,   perm_id = NULL,   coord.l = NULL,   coord.r = NULL,   seed = NULL,   threshold_type = c(\"sd\", \"percentile\", \"none\"),   threshold_value = 1,   pvalueCutoff = 0.05,   pAdjustMethod = c(\"fdr\", \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"BY\",     \"none\"),   matchcoexp_tol = 0.05,   matchcoexp_max_iter = 1e+06 )"},{"path":"/reference/brainenrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Brain Gene Set Analysis — brainenrich","text":"brain_data data frame brain data regions rows. row names (.e., region names) must consistent gene_data. gene_data data frame gene expression data regions rows genes columns. row names (.e., region names) must consistent brain_data. annoData environment containing annotation data. See get_annoData details. cor_method character string specifying correlation method. Default 'pearson'. options include 'spearman', 'pls1c', 'pls1w'. custom function takes (gene_data, brain_data) input provided, function use custom correlation method, cor_method set 'custom'. aggre_method character string specifying aggregation method. Default 'mean'. options include 'median', 'meanabs', 'meansqr', 'maxmean', 'ks_orig', 'ks_weighted', 'ks_pos_neg_sum', 'sign_test', 'rank_sum'. custom function takes (geneList, geneSet) input provided, function use custom aggregation method, aggre_method set 'custom'. null_model character string specifying null model use. Default 'spin_brain'. options include 'resample_gene' 'coexp_matched'. minGSSize integer specifying minimum gene set size intersecting genes gene_data. Default 10. maxGSSize integer specifying maximum gene set size intersecting genes gene_data. Default 200. n_cores integer specifying number cores use. Default 0 (use available cores minus one). n_perm integer specifying number permutations. Default 5000. perm_id matrix permutation indices 'spin_brain' null model. Default NULL. Either perm_id coord.l/coord.r must provided choosing 'spin_brain' mode. coord.l matrix coordinates left hemisphere used 'spin_brain' null model. Default NULL. Can NULL coord.r perm_id provided. coord.r matrix coordinates right hemisphere used 'spin_brain' null model. Default NULL. Can NULL coord.l perm_id provided. seed integer specifying seed reproducibility using 'spin_brain' model. Default NULL. threshold_type character string specifying threshold type identifying core genes. Default 'sd'. options 'percentile' 'none'. 'sd', threshold value represents number standard deviations mean. 'percentile', threshold value represents percentile distribution. 'none', identification core genes performed. threshold_value numeric value specifying threshold core gene identification. Default 1. See find_core_genes details. pvalueCutoff numeric value specifying p-value cutoff significance output. Default 0.05. pAdjustMethod character string specifying method p-value adjustment (\"fdr\", \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"none\"). Default 'fdr'. See p.adjust details. matchcoexp_tol numeric value specifying tolerance co-expression matching 'coexp_matched' null model. Lower values result better matching increase number iterations required. Default 0.05. See resample_geneSetList_matching_coexp details. matchcoexp_max_iter integer specifying maximum number iterations co-expression matching 'coexp_matched' null model. Default 1,000,000. See resample_geneSetList_matching_coexp details.","code":""},{"path":"/reference/brainenrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Brain Gene Set Analysis — brainenrich","text":"gseaResult object containing enrichment results.","code":""},{"path":"/reference/brainscore.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Brain Scores for Gene Sets — brainscore","title":"Calculate Brain Scores for Gene Sets — brainscore","text":"function calculates scores gene sets based brain data. supports different null models. null model specified, function calculates null scores based chosen model. null model 'none', function calculates raw (empirical) scores.","code":""},{"path":"/reference/brainscore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Brain Scores for Gene Sets — brainscore","text":"","code":"brainscore(   brain_data,   gene_data,   annoData,   cor_method = c(\"pearson\", \"spearman\", \"pls1c\", \"pls1w\"),   aggre_method = c(\"mean\", \"median\", \"meanabs\", \"meansqr\", \"maxmean\", \"ks_orig\",     \"ks_weighted\", \"ks_pos_neg_sum\", \"sign_test\", \"rank_sum\"),   null_model = c(\"none\", \"spin_brain\", \"resample_gene\", \"coexp_matched\"),   minGSSize = 10,   maxGSSize = 200,   n_cores = 0,   n_perm = NULL,   perm_id = NULL,   coord.l = NULL,   coord.r = NULL,   seed = NULL,   matchcoexp_tol = 0.05,   matchcoexp_max_iter = 1e+06,   verbose = TRUE )"},{"path":"/reference/brainscore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Brain Scores for Gene Sets — brainscore","text":"brain_data data frame brain data regions rows subjects columns. row names (.e., region names) must match gene_data. gene_data data frame gene expression data regions rows genes columns. row names (.e., region names) must match brain_data. annoData environment containing annotation data. See get_annoData details. cor_method character string specifying correlation method. Default 'pearson'. options include 'spearman', 'pls1c', 'pls1w'. custom function takes (gene_data, brain_data) input provided, function uses custom correlation method sets cor_method 'custom'. aggre_method character string specifying aggregation method. Default 'mean'. options include 'median', 'meanabs', 'meansqr', 'maxmean', 'ks_orig', 'ks_weighted', 'ks_pos_neg_sum', 'sign_test', 'rank_sum'. custom function takes (geneList, geneSet) input provided, function uses custom aggregation method sets aggre_method 'custom'. null_model character string specifying null model. Default 'none', calculates raw (empirical) scores. options include 'spin_brain', 'resample_gene', 'coexp_matched'. minGSSize integer specifying minimum gene set size intersecting genes gene_data. Default 10. maxGSSize integer specifying maximum gene set size intersecting genes gene_data. Default 200. n_cores integer specifying number cores use parallel processing permutation. Default 0 (uses available cores minus one). n_perm integer specifying number permutations null models. Default NULL (used null_model 'none'). perm_id matrix permutation indices 'spin_brain' null model. Default NULL. Either perm_id coord.l/coord.r must provided using 'spin_brain' model. coord.l matrix coordinates left hemisphere, used 'spin_brain' null model. Default NULL. can NULL coord.r perm_id provided. coord.r matrix coordinates right hemisphere, used 'spin_brain' null model. Default NULL. can NULL coord.l perm_id provided. seed integer specifying seed reproducibility using 'spin_brain' model. Default NULL. matchcoexp_tol numeric value specifying tolerance matched co-expression. Lower values result better matching require iterations. Default 0.05. See resample_geneSetList_matching_coexp details. matchcoexp_max_iter integer specifying maximum number iterations matched co-expression. Default 1,000,000. See resample_geneSetList_matching_coexp details. verbose logical indicating whether print messages processing. Default TRUE.","code":""},{"path":"/reference/brainscore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Brain Scores for Gene Sets — brainscore","text":"data frame containing gene set scores regions rows gene sets columns.","code":""},{"path":"/reference/brainscore.lm_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Brain Score Linear Model Test — brainscore.lm_test","title":"Perform Brain Score Linear Model Test — brainscore.lm_test","text":"function performs linear model test brain score data option use various null models comparison. calculates gene set scores, performs linear modeling, calculates p-values, identifies core genes.","code":""},{"path":"/reference/brainscore.lm_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Brain Score Linear Model Test — brainscore.lm_test","text":"","code":"brainscore.lm_test(   pred_df,   cov_df,   brain_data,   gene_data,   annoData,   gsScoreList.null = NULL,   cor_method = c(\"pearson\", \"spearman\", \"pls1c\", \"pls1w\", \"custom\"),   aggre_method = c(\"mean\", \"median\", \"meanabs\", \"meansqr\", \"maxmean\", \"ks_orig\",     \"ks_weighted\", \"ks_pos_neg_sum\", \"sign_test\", \"rank_sum\", \"custom\"),   null_model = c(\"spin_brain\", \"resample_gene\", \"coexp_matched\"),   minGSSize = 10,   maxGSSize = 200,   n_cores = 0,   n_perm = 5000,   perm_id = NULL,   coord.l = NULL,   coord.r = NULL,   seed = NULL,   threshold_type = c(\"sd\", \"percentile\", \"none\"),   threshold_value = 1,   pvalueCutoff = 0.05,   pAdjustMethod = c(\"fdr\", \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"BY\",     \"none\"),   matchcoexp_tol = 0.05,   matchcoexp_max_iter = 1e+06,   gsea_obj = TRUE )"},{"path":"/reference/brainscore.lm_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Brain Score Linear Model Test — brainscore.lm_test","text":"pred_df Data frame predictor variables. cov_df Data frame covariate variables. brain_data Data frame brain imaging data. gene_data Data frame gene expression data. annoData Environment containing annotation data. gsScoreList.null Precomputed list gene set scores null model brainscore/brainscore.hpc function. Default NULL. cor_method Character string specifying correlation method. Default 'pearson'. options include 'spearman', 'pls1c', 'pls1w', 'custom'. aggre_method Character string specifying aggregation method. Default 'mean'. options include 'median', 'meanabs', 'meansqr', 'maxmean', 'ks_orig', 'ks_weighted', 'ks_pos_neg_sum', 'sign_test', 'rank_sum', 'custom'. null_model Character string specifying null model method. Default 'spin_brain'. options include 'resample_gene', 'coexp_matched'. minGSSize Integer specifying minimum gene set size. Default 10. maxGSSize Integer specifying maximum gene set size. Default 200. n_cores Integer specifying number cores use parallel processing. Default 0. n_perm Integer specifying number permutations. Default 5000. perm_id Optional permutation ID. coord.l Optional left hemisphere coordinates. coord.r Optional right hemisphere coordinates. seed Optional random seed generating perm_id. threshold_type Character string specifying threshold type core genes. Default 'sd'. options include 'percentile'. threshold_value Numeric value specifying threshold level. Default 1. pvalueCutoff Numeric value specifying p-value cutoff significant results. Default 0.05. pAdjustMethod Character string specifying method (\"fdr\",\"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\",  \"none\") p-value adjustment. Default 'fdr'. see p.adjust details. matchcoexp_tol Numeric value specifying tolerance matched coexpression. Default 0.05. matchcoexp_max_iter Integer specifying maximum number iterations matched coexpression. Default 1000000. gsea_obj Logical specifying whether return GSEA object otherwise table returned. Default TRUE.","code":""},{"path":"/reference/brainscore.lm_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Brain Score Linear Model Test — brainscore.lm_test","text":"data frame containing results linear model test, including p-values, adjusted p-values, q-values, descriptions, core genes.","code":""},{"path":"/reference/brainscore.simulate.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Brain Score Simulation — brainscore.simulate","title":"Perform Brain Score Simulation — brainscore.simulate","text":"function performs simulations brain score data using different methods comparison. calculates gene set scores, performs linear modeling, returns simulation results.","code":""},{"path":"/reference/brainscore.simulate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Brain Score Simulation — brainscore.simulate","text":"","code":"brainscore.simulate(   pred_df,   cov_df,   brain_data,   gene_data,   annoData,   gsScoreList.null = NULL,   sim_n = 1000,   subsample_size = 100,   sim_type = c(\"randomize_pred\", \"spin_brain\", \"resample_gene\"),   cor_method = c(\"pearson\", \"spearman\", \"pls1c\", \"pls1w\", \"custom\"),   aggre_method = c(\"mean\", \"median\", \"meanabs\", \"meansqr\", \"maxmean\", \"ks_orig\",     \"ks_weighted\", \"ks_pos_neg_sum\", \"sign_test\", \"rank_sum\", \"custom\"),   minGSSize = 10,   maxGSSize = 200,   n_cores = 0,   perm_id = NULL,   n_perm = 1000 )"},{"path":"/reference/brainscore.simulate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Brain Score Simulation — brainscore.simulate","text":"pred_df Data frame predictor variables. cov_df Data frame covariate variables. brain_data Data frame brain imaging data. gene_data Data frame gene expression data. annoData Environment containing annotation data. gsScoreList.null Precomputed list gene set scores null model brainscore/brainscore.hpc function. Default NULL. sim_n Integer specifying number simulations. Default 1000. subsample_size Integer vector specifying subsample sizes. Default 100. sim_type Character string specifying simulation type. Default 'randomize_pred'. options include 'spin_brain', 'resample_gene', 'coexp_matched'. cor_method Character string specifying correlation method. Default 'pearson'. options include 'spearman', 'pls1c', 'pls1w', 'custom'. aggre_method Character string specifying aggregation method. Default 'mean'. options include 'median', 'meanabs', 'meansqr', 'maxmean', 'ks_orig', 'ks_weighted', 'ks_pos_neg_sum', 'sign_test', 'rank_sum', 'custom'. minGSSize Integer specifying minimum gene set size. Default 10. maxGSSize Integer specifying maximum gene set size. Default 200. n_cores Integer specifying number cores use parallel processing. Default 0 (use cores -1). perm_id Optional permutation ID. n_perm Integer specifying number permutations. Default 5000.","code":""},{"path":"/reference/brainscore.simulate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Brain Score Simulation — brainscore.simulate","text":"list data frames containing results simulations.","code":""},{"path":"/reference/brain_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Brain Data PC1 for Left Hemisphere — brain_data","title":"Brain Data PC1 for Left Hemisphere — brain_data","text":"dataset contains PC1 data filtered regions starting 'L_' Desikan atlas.","code":""},{"path":"/reference/brain_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brain Data PC1 for Left Hemisphere — brain_data","text":"","code":"brain_data"},{"path":"/reference/brain_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Brain Data PC1 for Left Hemisphere — brain_data","text":"data frame rows regions columns effect sizes case-control comparisons regional cortical thickness bipolar disorders healthy controls.","code":""},{"path":"/reference/brain_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Brain Data PC1 for Left Hemisphere — brain_data","text":"read.csv('data-raw/desikan_PC1_data.csv')","code":""},{"path":"/reference/calculate_pvals.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate P-Values — calculate_pvals","title":"Calculate P-Values — calculate_pvals","text":"function calculates p-values based provided true statistics null statistics lists. supports two methods p-value calculation: 'standard' 'split_pos_neg'.","code":""},{"path":"/reference/calculate_pvals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate P-Values — calculate_pvals","text":"","code":"calculate_pvals(   statList.true,   statList.null,   method = c(\"standard\", \"split_pos_neg\") )"},{"path":"/reference/calculate_pvals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate P-Values — calculate_pvals","text":"statList.true named list true statistics. statList.null named list null statistics corresponding true statistics. method method used p-value calculation. Either 'standard' 'split_pos_neg'. Default 'standard'.","code":""},{"path":"/reference/calculate_pvals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate P-Values — calculate_pvals","text":"list calculated p-values.","code":""},{"path":"/reference/coord_dk_lh.html","id":null,"dir":"Reference","previous_headings":"","what":"Desikan Centroid Coordinates for Left Hemisphere — coord_dk_lh","title":"Desikan Centroid Coordinates for Left Hemisphere — coord_dk_lh","text":"dataset contains centroid coordinates Desikan atlas regions left hemisphere.","code":""},{"path":"/reference/coord_dk_lh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Desikan Centroid Coordinates for Left Hemisphere — coord_dk_lh","text":"","code":"coord_dk_lh"},{"path":"/reference/coord_dk_lh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Desikan Centroid Coordinates for Left Hemisphere — coord_dk_lh","text":"data frame rows regions columns coordinates (x, y, z).","code":""},{"path":"/reference/coord_dk_lh.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Desikan Centroid Coordinates for Left Hemisphere — coord_dk_lh","text":"read.csv('data-raw/desikan_centroid.csv')","code":""},{"path":"/reference/corr_brain_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate correlations or associations between gene and brain data — corr_brain_gene","title":"Calculate correlations or associations between gene and brain data — corr_brain_gene","text":"Calculate correlations associations gene brain data","code":""},{"path":"/reference/corr_brain_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate correlations or associations between gene and brain data — corr_brain_gene","text":"","code":"corr_brain_gene(   gene_data,   brain_data,   method = c(\"pearson\", \"spearman\", \"pls1c\", \"pls1w\"),   r2z = TRUE )"},{"path":"/reference/corr_brain_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate correlations or associations between gene and brain data — corr_brain_gene","text":"gene_data data frame matrix gene expression data. brain_data data frame matrix brain data. method method used correlation/association. Can 'pearson', 'spearman', 'pls1c', 'pls1w', custom function provided user. r2z Logical, indicating whether convert correlation coefficients Fisher's Z scores. applicable 'pearson'.","code":""},{"path":"/reference/corr_brain_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate correlations or associations between gene and brain data — corr_brain_gene","text":"matrix correlation association coefficients gene data brain data.","code":""},{"path":"/reference/filter_geneSetList.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Gene Set List — filter_geneSetList","title":"Filter Gene Set List — filter_geneSetList","text":"function filters list gene sets based background genes specified size constraints.","code":""},{"path":"/reference/filter_geneSetList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Gene Set List — filter_geneSetList","text":"","code":"filter_geneSetList(bg_genes, geneSetList, minGSSize, maxGSSize)"},{"path":"/reference/filter_geneSetList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Gene Set List — filter_geneSetList","text":"bg_genes vector background gene symbols used filtering. geneSetList list gene sets filtered. minGSSize Minimum gene set size filtering. maxGSSize Maximum gene set size filtering.","code":""},{"path":"/reference/filter_geneSetList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Gene Set List — filter_geneSetList","text":"filtered list gene sets meet size constraints background genes criteria.","code":""},{"path":"/reference/find_core_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Core Genes Influencing Aggregated Score or LM Coefficients between molecular profile and behavioral data — find_core_genes","title":"Find Core Genes Influencing Aggregated Score or LM Coefficients between molecular profile and behavioral data — find_core_genes","text":"function performs Leave-One-(LOO) analysis gene sets determine core genes influence aggregated score. can utilize parallel processing enhance computation efficiency supports two types analysis: one considers gene sets another includes predictor covariate data frames.","code":""},{"path":"/reference/find_core_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Core Genes Influencing Aggregated Score or LM Coefficients between molecular profile and behavioral data — find_core_genes","text":"","code":"find_core_genes(   geneList,   geneSetList,   pred_df = NULL,   cov_df = NULL,   aggre_method,   n_cores = 1,   threshold_type = c(\"sd\", \"percentile\"),   threshold_value = 1 )"},{"path":"/reference/find_core_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Core Genes Influencing Aggregated Score or LM Coefficients between molecular profile and behavioral data — find_core_genes","text":"geneList matrix genes subs, column representing subject / group-level result. geneSetList list gene sets, containing names genes. pred_df Optional data frame predictor. NULL, perfomred group-level enrichment. cov_df Optional data frame covariates. NULL, perfomred group-level enrichment. aggre_method aggregation method used compute scores. n_cores number cores use parallel processing; defaults 1. Uses available cores minus one set 0. threshold_type method determine significance ('sd' standard deviation, 'percentile' percentile threshold). threshold_value Numeric value specifying threshold level; meaning depends threshold_type.","code":""},{"path":"/reference/find_core_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Core Genes Influencing Aggregated Score or LM Coefficients between molecular profile and behavioral data — find_core_genes","text":"list core genes gene set.","code":""},{"path":"/reference/generate_null_brain_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Null Brain Data — generate_null_brain_data","title":"Generate Null Brain Data — generate_null_brain_data","text":"function generates null brain datasets based permutations provided perm_id. rearranges brain data according permutations outputs shuffled datasets.","code":""},{"path":"/reference/generate_null_brain_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Null Brain Data — generate_null_brain_data","text":"","code":"generate_null_brain_data(brain_data, perm_id)"},{"path":"/reference/generate_null_brain_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Null Brain Data — generate_null_brain_data","text":"brain_data matrix representing brain data, row corresponds region. perm_id matrix permutations, column represents permutation row corresponds index brain_data.","code":""},{"path":"/reference/generate_null_brain_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Null Brain Data — generate_null_brain_data","text":"matrix null brain data dimensions brain_data permuted rows according perm_id.","code":""},{"path":"/reference/get_annoData.html","id":null,"dir":"Reference","previous_headings":"","what":"Load gene sets annotation data — get_annoData","title":"Load gene sets annotation data — get_annoData","text":"function loads annotation data RDS files located inst/extdata/geneSets directory package. specified file exist locally, downloaded GitHub repository.","code":""},{"path":"/reference/get_annoData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load gene sets annotation data — get_annoData","text":"","code":"get_annoData(   type = c(\"CellTypes_Lake2018\", \"CellTypes_Martins2021\", \"CellTypes_Seidlitz2020\",     \"DGN\", \"GO_BP\", \"GO_CC\", \"GO_MF\", \"KEGG\", \"Reactome\", \"SynGO\", \"WikiPathways\",     \"MeSH_A\", \"MeSH_B\", \"MeSH_C\", \"MeSH_D\", \"MeSH_E\", \"MeSH_F\", \"MeSH_G\", \"MeSH_H\",     \"MeSH_I\", \"MeSH_J\", \"MeSH_K\", \"MeSH_L\", \"MeSH_M\", \"MeSH_N\", \"MeSH_Z\") )"},{"path":"/reference/get_annoData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load gene sets annotation data — get_annoData","text":"type character string specifying type gene set load. Options : \"CellTypes_Lake2018\" Cell types data Lake2018 \"CellTypes_Martins2021\" Cell types data Martins2021 \"CellTypes_Seidlitz2020\" Cell types data Seidlitz2020 \"DGN\" DisGeNET gene sets \"GO_BP\" Gene Ontology Biological Process \"GO_CC\" Gene Ontology Cellular Component \"GO_MF\" Gene Ontology Molecular Function \"KEGG\" KEGG gene sets \"Reactome\" Reactome gene sets \"SynGO\" SynGO gene sets \"WikiPathways\" WikiPathways gene sets \"MeSH_A\" MeSH category gene sets \"MeSH_B\" MeSH category B gene sets \"MeSH_C\" MeSH category C gene sets \"MeSH_D\" MeSH category D gene sets \"MeSH_E\" MeSH category E gene sets \"MeSH_F\" MeSH category F gene sets \"MeSH_G\" MeSH category G gene sets \"MeSH_H\" MeSH category H gene sets \"MeSH_I\" MeSH category gene sets \"MeSH_J\" MeSH category J gene sets \"MeSH_K\" MeSH category K gene sets \"MeSH_L\" MeSH category L gene sets \"MeSH_M\" MeSH category M gene sets \"MeSH_N\" MeSH category N gene sets \"MeSH_Z\" MeSH category Z gene sets","code":""},{"path":"/reference/get_annoData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load gene sets annotation data — get_annoData","text":"data frame containing annotation data.","code":""},{"path":"/reference/get_annoData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load gene sets annotation data — get_annoData","text":"","code":"if (FALSE) { # \\dontrun{ annoData <- get_annoData(\"GO_BP\") } # }"},{"path":"/reference/get_geneExp.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Expression Data — get_geneExp","title":"Get Gene Expression Data — get_geneExp","text":"function retrieves gene expression data based specified parameters. #' function loads gene expression data CSV files located inst/extdata/geneExp directory package. specified file exist locally, downloaded GitHub repository.","code":""},{"path":"/reference/get_geneExp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Expression Data — get_geneExp","text":"","code":"get_geneExp(   atlas = c(\"desikan\", \"schaefer100\", \"schaefer200\", \"schaefer300\"),   rdonor = c(\"r0.2\", \"r0.4\", \"r0.6\"),   hem = c(\"L\", \"R\", \"B\") )"},{"path":"/reference/get_geneExp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Expression Data — get_geneExp","text":"atlas character string specifying atlas use. Options \"desikan\", \"schaefer100\", \"schaefer200\", \"schaefer300\". rdonor character string specifying donor resolution use. Options \"r0.2\", \"r0.4\", \"r0.6\". hem character string specifying hemisphere use. Options \"L\" (Left), \"R\" (Right), \"B\" ().","code":""},{"path":"/reference/get_geneExp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Expression Data — get_geneExp","text":"matrix containing gene expression data.","code":""},{"path":"/reference/get_geneExp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Gene Expression Data — get_geneExp","text":"data obtained ENIGMA-TOOLBOX. Please cite ENIGMA-TOOLBOX: Larivière, S., Paquola, C., Park, B. Y., Royer, J., Wang, Y., Benkarim, O., ... & Bernhardt, B. C. (2021). ENIGMA Toolbox: multiscale neural contextualization multisite neuroimaging datasets. Nature Methods, 18(7), 698-700.","code":""},{"path":"/reference/get_geneExp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Gene Expression Data — get_geneExp","text":"","code":"if (FALSE) { # \\dontrun{ geneExpMatrix <- get_geneExp(\"desikan\", \"r0.4\", \"L\") } # }"},{"path":"/reference/get_geneSetList.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Set List — get_geneSetList","title":"Get Gene Set List — get_geneSetList","text":"function retrieves gene set list annotation data. optionally converts gene identifiers gene symbols.","code":""},{"path":"/reference/get_geneSetList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Set List — get_geneSetList","text":"","code":"get_geneSetList(annoData)"},{"path":"/reference/get_geneSetList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Set List — get_geneSetList","text":"annoData Annotation data retrieve gene sets .","code":""},{"path":"/reference/get_geneSetList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Set List — get_geneSetList","text":"list gene sets.","code":""},{"path":"/reference/get_termDescription.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Gene Set Descriptions — get_termDescription","title":"Get Gene Set Descriptions — get_termDescription","text":"function retrieves descriptions gene sets annotation data.","code":""},{"path":"/reference/get_termDescription.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Gene Set Descriptions — get_termDescription","text":"","code":"get_termDescription(term, annoData, strip_prefix = \"\")"},{"path":"/reference/get_termDescription.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Gene Set Descriptions — get_termDescription","text":"term term search annoData (can vector terms). annoData environment containing annotation data. strip_prefix character string remove beginning term.","code":""},{"path":"/reference/get_termDescription.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Gene Set Descriptions — get_termDescription","text":"character vector gene set descriptions.","code":""},{"path":"/reference/identify_core_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify core genes based on a specified threshold method — identify_core_genes","title":"Identify core genes based on a specified threshold method — identify_core_genes","text":"Identify core genes based specified threshold method","code":""},{"path":"/reference/identify_core_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify core genes based on a specified threshold method — identify_core_genes","text":"","code":"identify_core_genes(   changes,   threshold_type = c(\"sd\", \"percentile\"),   threshold_value = 1 )"},{"path":"/reference/identify_core_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify core genes based on a specified threshold method — identify_core_genes","text":"changes Named vector changes LOO analysis. threshold_type Character string indicating method determine threshold (\"sd\" \"percentile\"). threshold_value Numeric value indicating percentile (method \"percentile\") number standard deviations (method \"sd\").","code":""},{"path":"/reference/identify_core_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify core genes based on a specified threshold method — identify_core_genes","text":"Vector core genes NA core genes identified.","code":""},{"path":"/reference/job_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Results from Saved RDS Files — job_cat","title":"Combine Results from Saved RDS Files — job_cat","text":"function combines results multiple saved RDS files single data frame list, saves combined results RDS file (optional), checks missing files.","code":""},{"path":"/reference/job_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Results from Saved RDS Files — job_cat","text":"","code":"job_cat(   input_dir,   output_dir = NULL,   n_rds = NULL,   save_name = NULL,   file_pattern = \"res_job_%d.rds\",   delete_originals = TRUE,   preserve_attributes = FALSE,   result_prefix = NULL,   compress = c(\"xz\", \"gzip\", \"bzip2\") )"},{"path":"/reference/job_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Results from Saved RDS Files — job_cat","text":"input_dir character string specifying directory containing RDS files combined. output_dir character string specifying directory RDS files stored. n_rds integer specifying expected number RDS files. provided, function check files missing. save_name character string specifying name output RDS file combined results. provided, default name output_dir. Must end .rds. file_pattern character string specifying pattern RDS files combined. Default \"res_job_%d.rds\". delete_originals logical indicating whether delete original RDS files combining. Default TRUE. preserve_attributes logical indicating whether preserve update attributes specific brainscore output. Default FALSE. result_prefix character string specifying prefix naming combined results. Default \"null_\". compress character string specifying compression method use saving combined results. efficient download HPC, default set \"xz\".","code":""},{"path":"/reference/job_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Results from Saved RDS Files — job_cat","text":"combined results, either saved RDS file returned directly save_combined FALSE.","code":""},{"path":"/reference/job_splitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribute and Process Iterations Across HPC Jobs — job_splitter","title":"Distribute and Process Iterations Across HPC Jobs — job_splitter","text":"function distributes set iterations across multiple jobs high-performance computing (HPC) environment. subsets necessary variables, calls specified function relevant subsets, saves results specified directory.","code":""},{"path":"/reference/job_splitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribute and Process Iterations Across HPC Jobs — job_splitter","text":"","code":"job_splitter(   job_id,   n_iter_per_job = 1,   iter_total,   prefix = \"res_job_\",   output_dir = NULL,   FUN,   subset_vars = list(),   subset_total_var = NULL,   ... )"},{"path":"/reference/job_splitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distribute and Process Iterations Across HPC Jobs — job_splitter","text":"job_id integer specifying job ID HPC job array (e.g., 1, 2, 3, ...). Determines subset iterations job process. n_iter_per_job integer specifying number iterations job process. Default 1. iter_total integer specifying total number iterations processed across jobs. prefix character string specifying base name saved RDS files. Default \"res_job_\". output_dir character string specifying directory results saved. directory exist, created. FUN function called process data specified iterations. function accept arguments specified .... subset_vars named list variables (typically matrices) need subset according job's assigned iterations. names correspond argument names FUN. subset_total_var character string specifying name argument FUN corresponds total number iterations. provided, total number iterations current job assigned argument. ... Additional arguments passed FUN.","code":""},{"path":"/reference/job_splitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distribute and Process Iterations Across HPC Jobs — job_splitter","text":"function return value saves results FUN RDS file specified output_dir.","code":""},{"path":"/reference/job_splitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribute and Process Iterations Across HPC Jobs — job_splitter","text":"","code":"if (FALSE) { # \\dontrun{ # Call job_splitter, which will subset 'perm_id' and pass it to 'FUN' job_splitter(   job_id = 1,   n_iter_per_job = 10,   iter_total = 100,   output_dir = \"/path/to/output\",   FUN = brainscore,   subset_vars = list(perm_id = perm_id),   subset_total_var = \"n_perm\",   brain_data = brain_data,   gene_data = gene_data,   annoData = annoData,   cor_method = \"pearson\",   aggre_method = \"mean\",   null_model = \"spin_brain\",   minGSSize = 20,   maxGSSize = 200 ) } # }"},{"path":"/reference/perm_id_dk_lh_5000.html","id":null,"dir":"Reference","previous_headings":"","what":"Permutation index for left Desikan regions (5000 permutations) — perm_id_dk_lh_5000","title":"Permutation index for left Desikan regions (5000 permutations) — perm_id_dk_lh_5000","text":"Permutation index left Desikan regions (5000 permutations)","code":""},{"path":"/reference/perm_id_dk_lh_5000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Permutation index for left Desikan regions (5000 permutations) — perm_id_dk_lh_5000","text":"","code":"perm_id_dk_lh_5000"},{"path":"/reference/perm_id_dk_lh_5000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Permutation index for left Desikan regions (5000 permutations) — perm_id_dk_lh_5000","text":"matrix rows regions columns permutated indices.","code":""},{"path":"/reference/perm_id_dk_lh_5000.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Permutation index for left Desikan regions (5000 permutations) — perm_id_dk_lh_5000","text":"rotate_parcellation(coord.l = coord_dk_lh, nrot = 5000)","code":""},{"path":"/reference/resample_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Gene List — resample_gene","title":"Resample Gene List — resample_gene","text":"Generates set permuted gene lists original gene list, ensuring uniqueness permuted sets.","code":""},{"path":"/reference/resample_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Gene List — resample_gene","text":"","code":"resample_gene(geneList.true, n_perm = 5000)"},{"path":"/reference/resample_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Gene List — resample_gene","text":"geneList.true matrix gene expression data. n_perm Number permutations generate.","code":""},{"path":"/reference/resample_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Gene List — resample_gene","text":"matrix permuted gene lists.","code":""},{"path":"/reference/resample_geneSetList_matching_coexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample Gene Sets with Specified Constraints — resample_geneSetList_matching_coexp","title":"Resample Gene Sets with Specified Constraints — resample_geneSetList_matching_coexp","text":"function resamples gene sets based specific constraints like matching co-expression patterns. methodology implemented informed Wei et al. (2022) statistical testing transcriptomic-neuroimaging studies. important note restricting null models subset genes can problematic. empirical statistics sampled full gene pool differ derived restricted pool. Therefore, usage approach caution.","code":""},{"path":"/reference/resample_geneSetList_matching_coexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample Gene Sets with Specified Constraints — resample_geneSetList_matching_coexp","text":"","code":"resample_geneSetList_matching_coexp(   gene_data,   geneSetList,   tol = 0.01,   max_iter = 1e+06,   n_perm = 5000,   n_cores = 1 )"},{"path":"/reference/resample_geneSetList_matching_coexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample Gene Sets with Specified Constraints — resample_geneSetList_matching_coexp","text":"gene_data matrix data frame representing gene expression data. geneSetList list gene sets resampled. tol numeric value indicating tolerance matching co-expression patterns (default = 0.01). max_iter integer indicating maximum number iterations sampling process (default = 1000000). n_perm integer indicating number permutations generate (default = 5000). n_cores integer indicating number cores use parallel processing (default = 1).","code":""},{"path":"/reference/resample_geneSetList_matching_coexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resample Gene Sets with Specified Constraints — resample_geneSetList_matching_coexp","text":"list resampled gene sets based specified constraints.","code":""},{"path":"/reference/resample_geneSetList_matching_coexp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Resample Gene Sets with Specified Constraints — resample_geneSetList_matching_coexp","text":"Wei, Y., de Lange, S. C., Pijnenburg, R., Scholtens, L. H., Ardesch, D. J., Watanabe, K., Posthuma, D., & van den Heuvel, M. P. (2022). Statistical testing transcriptomic-neuroimaging studies: -evaluation methods assessing spatial gene specificity. Human Brain Mapping, 43(3), 885–901.","code":""},{"path":"/reference/rotate_parcellation.html","id":null,"dir":"Reference","previous_headings":"","what":"Rotate Parcellation — rotate_parcellation","title":"Rotate Parcellation — rotate_parcellation","text":"Generate permutation map set cortical regions interest , (approximately) preserving contiguity hemispheric symmetry. function based rotation FreeSurfer projection coordinates set regions interest sphere. #' function modified original version available : https://github.com/frantisekvasa/rotate_parcellation. Please cite relevant papers source used function.","code":""},{"path":"/reference/rotate_parcellation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rotate Parcellation — rotate_parcellation","text":"","code":"rotate_parcellation(   coord.l = NULL,   coord.r = NULL,   nrot = 5000,   method = c(\"hungarian\", \"vasa\"),   seed = NULL )"},{"path":"/reference/rotate_parcellation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rotate Parcellation — rotate_parcellation","text":"coord.l Coordinates left hemisphere regions sphere (array size n(LH regions) x 3). Can NULL right hemisphere used. coord.r Coordinates right hemisphere regions sphere (array size n(RH regions) x 3). Can NULL left hemisphere used. nrot Number rotations (default = 5000). method Method match rotated unrotated regions; options 'vasa' (faster, can suboptimal) 'hungarian' (default, slower, optimal). seed Seed reproducibility.","code":""},{"path":"/reference/rotate_parcellation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rotate Parcellation — rotate_parcellation","text":"Array permutations, set regions (array size n(total regions) x nrot).","code":""},{"path":"/reference/rotate_parcellation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rotate Parcellation — rotate_parcellation","text":"Modifications include: Added support scenarios one hemisphere's coordinates provided. Improved handling coordinate dimensions conditional concatenation reference rotation indices. Included importFrom directives required functions matrixStats clue. Ensured function generates nrot + 100 permutations, removes duplicates, returns exactly nrot unique permutations.","code":""},{"path":"/reference/sample_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data from HCP data — sample_df","title":"Simulated data from HCP data — sample_df","text":"Simulated data HCP data","code":""},{"path":"/reference/sample_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data from HCP data — sample_df","text":"","code":"sample_df"},{"path":"/reference/sample_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data from HCP data — sample_df","text":"data frame rows subjects columns age, sex, BMI regional cortical thickness values","code":""},{"path":"/reference/sample_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Simulated data from HCP data — sample_df","text":"mvrnorm(n = 100, mu = mean_vals, Sigma = cov_matrix); sample(df.hcp$Age_in_Yrs, 100, replace = FALSE); sample(df.hcp$Sex, 100, replace = FALSE); sample(df.hcp$BMI, 100, replace = FALSE)","code":""},{"path":"/reference/sample_gs_matching_coexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Gene Sets Matching Co-Expression — sample_gs_matching_coexp","title":"Sample Gene Sets Matching Co-Expression — sample_gs_matching_coexp","text":"function samples gene sets closely match co-expression profile target gene set. methodology implemented informed Wei et al. (2022) statistical testing transcriptomic-neuroimaging studies.","code":""},{"path":"/reference/sample_gs_matching_coexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Gene Sets Matching Co-Expression — sample_gs_matching_coexp","text":"","code":"sample_gs_matching_coexp(   gs,   coexp_matrix,   tol = 0.01,   max_iter = 1e+06,   n_target = 5000 )"},{"path":"/reference/sample_gs_matching_coexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Gene Sets Matching Co-Expression — sample_gs_matching_coexp","text":"gs target gene set similar co-expression profiles sought. coexp_matrix co-expression matrix, typically calculated correlation matrix gene expression data. tol Tolerance difference co-expression target sampled gene sets. max_iter Maximum number iterations attempt finding matches. n_target Number gene sets sample.","code":""},{"path":"/reference/sample_gs_matching_coexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Gene Sets Matching Co-Expression — sample_gs_matching_coexp","text":"list gene sets closely match target gene set's co-expression profile.","code":""},{"path":"/reference/sample_gs_matching_coexp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample Gene Sets Matching Co-Expression — sample_gs_matching_coexp","text":"Wei, Y., de Lange, S. C., Pijnenburg, R., Scholtens, L. H., Ardesch, D. J., Watanabe, K., Posthuma, D., & van den Heuvel, M. P. (2022). Statistical testing transcriptomic-neuroimaging studies: -evaluation methods assessing spatial gene specificity. Human Brain Mapping, 43(3), 885–901.","code":""},{"path":"/reference/simple_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Linear Regression with Multiple Predictors and Covariates — simple_lm","title":"Perform Linear Regression with Multiple Predictors and Covariates — simple_lm","text":"function fits linear models specified dependent variables using given predictors covariates. returns data frame containing model summaries.","code":""},{"path":"/reference/simple_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Linear Regression with Multiple Predictors and Covariates — simple_lm","text":"","code":"simple_lm(   dependent_df,   pred_df,   cov_df,   stat2return = c(\"all\", \"tval\", \"pval\", \"tval_list\") )"},{"path":"/reference/simple_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Linear Regression with Multiple Predictors and Covariates — simple_lm","text":"dependent_df data frame containing dependent variables. pred_df data frame containing predictor variables. cov_df data frame containing covariate variables. stat2return character string specifying statistic return (\"statistic\", \"p.value\", \"full\"). Default \"full\". \"statistic\" returns t-value permutation purposes, \"p.value\" returns p-value simulation analysis, \"full\" returns information parametric test.","code":""},{"path":"/reference/simple_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Linear Regression with Multiple Predictors and Covariates — simple_lm","text":"data frame containing model summaries. Depending stat2return, output can include different statistics: stat2return \"\", output includes unstandardized standardized coefficients, standard errors, t-values, confidence intervals, p-values, adjusted p-values, significance markers. stat2return \"tval\", output includes t-values. stat2return \"tval\", output includes t-values list. stat2return \"pval\", output includes p-values.","code":""},{"path":"/reference/split_Anno.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Annotation Data — split_Anno","title":"Split Annotation Data — split_Anno","text":"function extracts reconstructs path2gene path2name data frames annotation environment created build_Anno function. retrieves organizes pathway IDs associated gene IDs, well pathway names, two separate data frames.","code":""},{"path":"/reference/split_Anno.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Annotation Data — split_Anno","text":"","code":"split_Anno(Anno_clusterProfiler_Env)"},{"path":"/reference/split_Anno.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Annotation Data — split_Anno","text":"Anno_clusterProfiler_Env environment containing annotation data, including PATHID2EXTID PATHID2NAME, created build_Anno function.","code":""},{"path":"/reference/split_Anno.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Annotation Data — split_Anno","text":"list two components: path2gene data frame two columns: pathID geneID, representing relationship pathway IDs gene IDs. path2name data frame two columns: pathID pathName, representing mapping pathway IDs corresponding names. PATHID2NAME present environment, component NULL.","code":""},{"path":"/reference/swap_geneList.html","id":null,"dir":"Reference","previous_headings":"","what":"Swap Gene List — swap_geneList","title":"Swap Gene List — swap_geneList","text":"function swaps original values gene set (orig_gs) sampled gene sets (sampled_gs) within given geneList.true. resulting geneList.null format generated approaches.","code":""},{"path":"/reference/swap_geneList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Swap Gene List — swap_geneList","text":"","code":"swap_geneList(geneList.true, orig_gs, sampled_gs)"},{"path":"/reference/swap_geneList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Swap Gene List — swap_geneList","text":"geneList.true matrix representing true gene list, dimensions m x 1. orig_gs vector original gene set identifiers. sampled_gs list sampled gene sets, vector gene identifiers.","code":""},{"path":"/reference/swap_geneList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Swap Gene List — swap_geneList","text":"matrix column represents null gene list generated swapping orig_gs set sampled_gs.","code":""}]
